/*
    wxWeaver - A GUI Designer Editor for wxWidgets.
    Copyright (C) 2005 Jos√© Antonio Hurtado
    Copyright (C) 2005 Juan Antonio Ortega (as wxFormBuilder)
    Copyright (C) 2021 Andrea Zanellato <redtid3@gmail.com>

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/
#include <plugin.h>
#include <xrcconv.h>
#include <forms/wizard.h>

#include <wx/aui/aui.h>

#if 0
BEGIN_EVENT_TABLE(ComponentEvtHandler, wxEvtHandler)
EVT_TOOL(wxID_ANY, ComponentEvtHandler::OnTool)
END_EVENT_TABLE()
#endif

// Event handler for events generated by controls in this plugin
class ComponentEvtHandler : public wxEvtHandler {
private:
    IManager* m_manager;

public:
    ComponentEvtHandler(IManager* manager)
        : m_manager(manager)
    {
        Bind(wxEVT_TOOL, &ComponentEvtHandler::OnTool, this);
    }

protected:
    void OnTool(wxCommandEvent& event);
};

class FrameFormComponent : public ComponentBase {
public:
    wxObject* Create(IObject* /*obj*/, wxObject* parent) override
    {
        // TODO: Use system color
        wxPanel* frame = new wxPanel((wxWindow*)parent, wxID_ANY);
        frame->SetBackgroundColour(wxColour(50, 50, 50));
        return frame;
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxFrame",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("title", "title", XRC_TYPE_TEXT);
        if (!obj->IsNull("center"))
            xrc.AddPropertyValue("centered", "1");

        xrc.AddProperty("aui_managed", "aui_managed", XRC_TYPE_BOOL);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "Frame");
        filter.AddWindowProperties();
        filter.AddProperty("title", "title", XRC_TYPE_TEXT);
        filter.AddProperty("centered", "center", XRC_TYPE_BITLIST);
        filter.AddProperty("aui_managed", "aui_managed", XRC_TYPE_BOOL);
        return filter.GetXfbObject();
    }
};

class PanelFormComponent : public ComponentBase {
public:
    wxObject* Create(IObject* /*obj*/, wxObject* parent) override
    {
        wxPanel* panel = new wxPanel((wxWindow*)parent, wxID_ANY);
        return panel;
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxPanel",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "Panel");
        filter.AddWindowProperties();
        return filter.GetXfbObject();
    }
};

class DialogFormComponent : public ComponentBase {
public:
    wxObject* Create(IObject* /*obj*/, wxObject* parent) override
    {
        wxPanel* dialog = new wxPanel((wxWindow*)parent, wxID_ANY);
        return dialog;
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxDialog",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("title", "title", XRC_TYPE_TEXT);
        if (!obj->IsNull("center")) {
            xrc.AddPropertyValue("centered", "1");
        }
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "Dialog");
        filter.AddWindowProperties();
        filter.AddProperty("title", "title", XRC_TYPE_TEXT);
        filter.AddProperty("centered", "center", XRC_TYPE_BITLIST);
        return filter.GetXfbObject();
    }
};

class MenuBarFormComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* /*parent*/) override
    {
        wxMenuBar* menuBar = new wxMenuBar(
            obj->GetPropertyAsInteger("style")
            | obj->GetPropertyAsInteger("window_style"));

        return menuBar;
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxMenuBar",
                              obj->GetPropertyAsString("name"));
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "MenuBar");
        return filter.GetXfbObject();
    }
};

class ToolBarFormComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxToolBar* toolBar = new wxToolBar(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style")
                | wxTB_NOALIGN | wxTB_NODIVIDER | wxNO_BORDER);

        if (!obj->IsNull("bitmapsize"))
            toolBar->SetToolBitmapSize(obj->GetPropertyAsSize("bitmapsize"));
        if (!obj->IsNull("margins")) {
            wxSize margins(obj->GetPropertyAsSize("margins"));
            toolBar->SetMargins(margins.GetWidth(), margins.GetHeight());
        }
        if (!obj->IsNull("packing"))
            toolBar->SetToolPacking(obj->GetPropertyAsInteger("packing"));
        if (!obj->IsNull("separation"))
            toolBar->SetToolSeparation(obj->GetPropertyAsInteger("separation"));

        toolBar->PushEventHandler(new ComponentEvtHandler(GetManager()));

        return toolBar;
    }

    void Cleanup(wxObject* obj) override
    {
        wxToolBar* toolBar = wxDynamicCast(obj, wxToolBar);
        if (toolBar)
            toolBar->PopEventHandler(true);
    }

    void OnCreated(wxObject* wxobject, wxWindow* /*wxparent*/) override
    {
        wxToolBar* toolBar = wxDynamicCast(wxobject, wxToolBar);
        if (!toolBar)
            return;

        size_t count = GetManager()->GetChildCount(wxobject);
        for (size_t i = 0; i < count; ++i) {

            wxObject* child = GetManager()->GetChild(wxobject, i);
            IObject* childObj = GetManager()->GetIObject(child);

            if (childObj->GetClassName() == "tool") {
                toolBar->AddTool(
                    wxID_ANY,
                    childObj->GetPropertyAsString("label"),
                    childObj->GetPropertyAsBitmap("bitmap"),
                    wxNullBitmap,
                    (wxItemKind)childObj->GetPropertyAsInteger("kind"),
                    childObj->GetPropertyAsString("help"),
                    wxEmptyString,
                    child);
            } else if ("toolSeparator" == childObj->GetClassName()) {
                toolBar->AddSeparator();
            } else {
                wxControl* control = wxDynamicCast(child, wxControl);
                if (control)
                    toolBar->AddControl(control);
            }
        }
        toolBar->Realize();
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxToolBar", obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("bitmapsize", "bitmapsize", XRC_TYPE_SIZE);
        xrc.AddProperty("margins", "margins", XRC_TYPE_SIZE);
        xrc.AddProperty("packing", "packing", XRC_TYPE_INTEGER);
        xrc.AddProperty("separation", "separation", XRC_TYPE_INTEGER);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "ToolBar");
        filter.AddWindowProperties();
        filter.AddProperty("bitmapsize", "bitmapsize", XRC_TYPE_SIZE);
        filter.AddProperty("margins", "margins", XRC_TYPE_SIZE);
        filter.AddProperty("packing", "packing", XRC_TYPE_INTEGER);
        filter.AddProperty("separation", "separation", XRC_TYPE_INTEGER);
        return filter.GetXfbObject();
    }
};

void ComponentEvtHandler::OnTool(wxCommandEvent& event)
{
    wxToolBar* toolBar = wxDynamicCast(event.GetEventObject(), wxToolBar);
    if (!toolBar)
        return;

    wxObject* wxobject = toolBar->GetToolClientData(event.GetId());
    if (wxobject)
        m_manager->SelectObject(wxobject);
}

class WizardFormComponent : public ComponentBase {
public:
    wxObject* Create(IObject*, wxObject* parent) override
    {
        wxPanel* wizard = new wxPanel((wxWindow*)parent);
        return wizard;
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxWizard", obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("title", "title", XRC_TYPE_TEXT);
        if (!obj->IsNull("center"))
            xrc.AddPropertyValue("centered", "1");

        if (!obj->IsNull("bitmap"))
            xrc.AddProperty("bitmap", "bitmap", XRC_TYPE_BITMAP);

        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "Wizard");
        filter.AddWindowProperties();
        filter.AddProperty("title", "title", XRC_TYPE_TEXT);
        filter.AddProperty("centered", "center", XRC_TYPE_BITLIST);
        filter.AddProperty("bitmap", "bitmap", XRC_TYPE_BITMAP);
        return filter.GetXfbObject();
    }
};

class WizardPageComponent : public ComponentBase {
public:
    wxObject* Create(IObject* /*obj*/, wxObject* parent) override
    {
        WizardPageSimple* page = new WizardPageSimple((Wizard*)parent);
        return page;
    }

// TODO: Probably to be removed
#if 0
    void OnSelected(wxObject* wxobject, IManager* manager)
    {
        wxLogDebug("WizardPageSimple OnSelected");

        wxObject* page = manager->GetChild(wxobject, 0);
        if (!page)
            return;

        Wizard* wizard = wxDynamicCast(manager->GetParent(wxobject), Wizard);
        if (!wizard)
            return;

        for (size_t i = 0; i < wizard->GetPageCount(); ++i) {
            if (wizard->GetPage(i) == page) {

                // Prevent infinite event loop
                wxEvtHandler* wizardEvtHandler = wizard->PopEventHandler();
                wxEvtHandler* vobjEvtHandler = wizard->PopEventHandler();

                // Select Page
                wizard->SetSelection(i);

                // Restore event handling
                wizard->PushEventHandler(vobjEvtHandler);
                wizard->PushEventHandler(wizardEvtHandler);
            }
        }
    }
#endif
    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxWizardPageSimple",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        if (!obj->IsNull("bitmap"))
            xrc.AddProperty("bitmap", "bitmap", XRC_TYPE_BITMAP);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "WizardPageSimple");
        filter.AddWindowProperties();
        filter.AddProperty("bitmap", "bitmap", XRC_TYPE_BITMAP);
        return filter.GetXfbObject();
    }
};

BEGIN_LIBRARY()
ABSTRACT_COMPONENT("Frame", FrameFormComponent)
ABSTRACT_COMPONENT("Panel", PanelFormComponent)
ABSTRACT_COMPONENT("Dialog", DialogFormComponent)
ABSTRACT_COMPONENT("Wizard", WizardFormComponent)

WINDOW_COMPONENT("WizardPageSimple", WizardPageComponent)

ABSTRACT_COMPONENT("MenuBar", MenuBarFormComponent)
WINDOW_COMPONENT("ToolBar", ToolBarFormComponent)

// wxWindow style macros
MACRO(wxBORDER_DEFAULT)
MACRO(wxBORDER_SIMPLE)
MACRO(wxBORDER_DOUBLE)
MACRO(wxBORDER_SUNKEN)
MACRO(wxBORDER_RAISED)
MACRO(wxBORDER_STATIC)
MACRO(wxBORDER_THEME)
MACRO(wxBORDER_NONE)
MACRO(wxTRANSPARENT_WINDOW)
MACRO(wxTAB_TRAVERSAL)
MACRO(wxWANTS_CHARS)
MACRO(wxVSCROLL)
MACRO(wxHSCROLL)
MACRO(wxALWAYS_SHOW_SB)
MACRO(wxCLIP_CHILDREN)
MACRO(wxFULL_REPAINT_ON_RESIZE)
MACRO(wxNO_FULL_REPAINT_ON_RESIZE)
MACRO(wxWS_EX_VALIDATE_RECURSIVELY)
MACRO(wxWS_EX_BLOCK_EVENTS)
MACRO(wxWS_EX_TRANSIENT)
MACRO(wxWS_EX_CONTEXTHELP)
MACRO(wxWS_EX_PROCESS_IDLE)
MACRO(wxWS_EX_PROCESS_UI_UPDATES)

SYNONYMOUS(wxSIMPLE_BORDER, wxBORDER_SIMPLE)
SYNONYMOUS(wxDOUBLE_BORDER, wxBORDER_DOUBLE)
SYNONYMOUS(wxSUNKEN_BORDER, wxBORDER_SUNKEN)
SYNONYMOUS(wxRAISED_BORDER, wxBORDER_RAISED)
SYNONYMOUS(wxSTATIC_BORDER, wxBORDER_STATIC)
SYNONYMOUS(wxNO_BORDER, wxBORDER_NONE)

// wxFrame style macros
MACRO(wxDEFAULT_FRAME_STYLE)
MACRO(wxICONIZE)
MACRO(wxCAPTION)
MACRO(wxMINIMIZE)
MACRO(wxMINIMIZE_BOX)
MACRO(wxMAXIMIZE)
MACRO(wxMAXIMIZE_BOX)
MACRO(wxCLOSE_BOX)
MACRO(wxSTAY_ON_TOP)
MACRO(wxSYSTEM_MENU)
MACRO(wxRESIZE_BORDER)
MACRO(wxFRAME_TOOL_WINDOW)
MACRO(wxFRAME_NO_TASKBAR)
MACRO(wxFRAME_FLOAT_ON_PARENT)
MACRO(wxFRAME_SHAPED)
MACRO(wxFRAME_EX_CONTEXTHELP)
MACRO(wxFRAME_EX_METAL)

// wxDialog style macros
#if 0
MACRO(wxCAPTION)
MACRO(wxRESIZE_BORDER)
MACRO(wxSYSTEM_MENU)
MACRO(wxCLOSE_BOX)
MACRO(wxMAXIMIZE_BOX)
MACRO(wxMINIMIZE_BOX)
MACRO(wxSTAY_ON_TOP)
#endif
MACRO(wxDEFAULT_DIALOG_STYLE)
MACRO(wxDIALOG_NO_PARENT)
MACRO(wxDIALOG_EX_METAL)
MACRO(wxDIALOG_EX_CONTEXTHELP)
MACRO(wxBOTH)
SYNONYMOUS(1, wxBOTH)

MACRO(wxWIZARD_EX_HELPBUTTON)

// wxMenuBar
MACRO(wxMB_DOCKABLE)

// wxToolBar
MACRO(wxTB_FLAT)
MACRO(wxTB_DOCKABLE)
MACRO(wxTB_HORIZONTAL)
MACRO(wxTB_VERTICAL)
MACRO(wxTB_TEXT)
MACRO(wxTB_NOICONS)
MACRO(wxTB_NODIVIDER)
MACRO(wxTB_NOALIGN)
MACRO(wxTB_HORZ_LAYOUT)
MACRO(wxTB_HORZ_TEXT)

// wxAuiManager
MACRO(wxAUI_MGR_ALLOW_FLOATING)
MACRO(wxAUI_MGR_ALLOW_ACTIVE_PANE)
MACRO(wxAUI_MGR_TRANSPARENT_DRAG)
MACRO(wxAUI_MGR_TRANSPARENT_HINT)
MACRO(wxAUI_MGR_VENETIAN_BLINDS_HINT)
MACRO(wxAUI_MGR_RECTANGLE_HINT)
MACRO(wxAUI_MGR_HINT_FADE)
MACRO(wxAUI_MGR_NO_VENETIAN_BLINDS_FADE)
MACRO(wxAUI_MGR_LIVE_RESIZE)
MACRO(wxAUI_MGR_DEFAULT)
END_LIBRARY()
