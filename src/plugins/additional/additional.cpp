/*
    wxWeaver - A GUI Designer Editor for wxWidgets.
    Copyright (C) 2005 Jos√© Antonio Hurtado
    Copyright (C) 2005 Juan Antonio Ortega (as wxFormBuilder)
    Copyright (C) 2021 Andrea Zanellato <redtid3@gmail.com>

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/
#include "logo.xpm"
#include "smiley.xpm"

#include <plugin.h>
#include <ticpp.h>
#include <xrcconv.h>

#include <wx/calctrl.h>
#include <wx/datectrl.h>
#include <wx/dirctrl.h>
#include <wx/grid.h>
#include <wx/html/htmlwin.h>
#include <wx/spinctrl.h>
#include <wx/tglbtn.h>
#include <wx/timectrl.h>

// wxMediaCtrl
#ifdef USE_MEDIACTRL
#include <wx/mediactrl.h>
#endif

// wxPropertyGrid
#include <wx/propgrid/manager.h>
#include <wx/propgrid/advprops.h>

// wxStyledTextCtrl
#include <wx/stc/stc.h>

// wxDataViewCtrl
#include <wx/dataview.h>

// wxRibbonBar
#include <wx/ribbon/buttonbar.h>
#include <wx/ribbon/toolbar.h>
#include <wx/ribbon/gallery.h>

// wxTreeListCtrl
#include <wx/treelist.h>

#include <wx/clrpicker.h>
#include <wx/filepicker.h>
#include <wx/fontpicker.h>
#include <wx/hyperlink.h>
#include <wx/richtext/richtextctrl.h>
#include <wx/srchctrl.h>

#if 0
BEGIN_EVENT_TABLE(ComponentEvtHandler, wxEvtHandler)
EVT_COLOURPICKER_CHANGED(wxID_ANY, ComponentEvtHandler::OnColourPickerColourChanged)
EVT_FONTPICKER_CHANGED(wxID_ANY, ComponentEvtHandler::OnFontPickerFontChanged)
EVT_FILEPICKER_CHANGED(wxID_ANY, ComponentEvtHandler::OnFilePickerFileChanged)
EVT_DIRPICKER_CHANGED(wxID_ANY, ComponentEvtHandler::OnDirPickerDirChanged)
EVT_TEXT(wxID_ANY, ComponentEvtHandler::OnText)

// Grid also seems to ignore clicks
EVT_GRID_CELL_LEFT_CLICK(ComponentEvtHandler::OnGridClick)
EVT_GRID_LABEL_LEFT_CLICK(ComponentEvtHandler::OnGridClick)

EVT_GRID_COL_SIZE(ComponentEvtHandler::OnGridColSize)
EVT_GRID_ROW_SIZE(ComponentEvtHandler::OnGridRowSize)

EVT_STC_MARGINCLICK(wxID_ANY, ComponentEvtHandler::OnMarginClick)
EVT_RIBBONBAR_PAGE_CHANGED(wxID_ANY, ComponentEvtHandler::OnRibbonBarPageChanged)
END_EVENT_TABLE()
#endif

// Event handler for events generated by controls in this plugin
class ComponentEvtHandler : public wxEvtHandler {
public:
    ComponentEvtHandler(wxWindow* win, IManager* manager)
        : m_window(win)
        , m_manager(manager)
    {
        Bind(wxEVT_COLOURPICKER_CHANGED,
             &ComponentEvtHandler::OnColourPickerColourChanged, this);

        Bind(wxEVT_FONTPICKER_CHANGED,
             &ComponentEvtHandler::OnFontPickerFontChanged, this);

        Bind(wxEVT_FILEPICKER_CHANGED,
             &ComponentEvtHandler::OnFilePickerFileChanged, this);

        Bind(wxEVT_DIRPICKER_CHANGED,
             &ComponentEvtHandler::OnDirPickerDirChanged, this);

        Bind(wxEVT_TEXT,
             &ComponentEvtHandler::OnText, this);

        // Grid also seems to ignore clicks
        Bind(wxEVT_GRID_CELL_LEFT_CLICK,
             &ComponentEvtHandler::OnGridClick, this);

        Bind(wxEVT_GRID_LABEL_LEFT_CLICK,
             &ComponentEvtHandler::OnGridClick, this);

        Bind(wxEVT_GRID_COL_SIZE,
             &ComponentEvtHandler::OnGridColSize, this);

        Bind(wxEVT_GRID_ROW_SIZE,
             &ComponentEvtHandler::OnGridRowSize, this);

        Bind(wxEVT_STC_MARGINCLICK,
             &ComponentEvtHandler::OnMarginClick, this);

        Bind(wxEVT_RIBBONBAR_PAGE_CHANGED,
             &ComponentEvtHandler::OnRibbonBarPageChanged, this);
    }

protected:
    void OnGridClick(wxGridEvent& event);
    void OnGridColSize(wxGridSizeEvent& event);
    void OnGridRowSize(wxGridSizeEvent& event);
    void OnColourPickerColourChanged(wxColourPickerEvent& event);
    void OnFontPickerFontChanged(wxFontPickerEvent& event);
    void OnFilePickerFileChanged(wxFileDirPickerEvent& event);
    void OnDirPickerDirChanged(wxFileDirPickerEvent& event);
    void OnText(wxCommandEvent& event);
    void OnGenericDirCtrlExpandItem(wxTreeEvent& event);

    // Enable folding for wxStyledTextCtrl
    void OnMarginClick(wxStyledTextEvent& event);
    void OnRibbonBarPageChanged(wxRibbonBarEvent& event);

private:
    wxWindow* m_window;
    IManager* m_manager;
};

#if 0
BEGIN_EVENT_TABLE(GenericDirCtrlEvtHandler, wxEvtHandler)
// GenericDirCtrl also seems to ignore clicks
EVT_LEFT_DOWN(GenericDirCtrlEvtHandler::OnGenericDirCtrlLeftClick)
END_EVENT_TABLE()
#endif

// Event handler for events generated by wxGenericDirCtrl.
class GenericDirCtrlEvtHandler : public wxEvtHandler {
public:
    GenericDirCtrlEvtHandler(wxWindow* win, IManager* manager)
        : m_window(win)
        , m_manager(manager)
    {
        // GenericDirCtrl also seems to ignore clicks
        Bind(wxEVT_LEFT_DOWN,
             &GenericDirCtrlEvtHandler::OnGenericDirCtrlLeftClick, this);
    }

protected:
    void OnGenericDirCtrlLeftClick(wxMouseEvent& event);

private:
    wxWindow* m_window;
    IManager* m_manager;
};
class CalendarCtrlComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        return new wxCalendarCtrl(
            (wxWindow*)parent, wxID_ANY, wxDefaultDateTime,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxCalendarCtrl",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxCalendarCtrl");
        filter.AddWindowProperties();
        return filter.GetXfbObject();
    }
};

class DatePickerCtrlComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        return new wxDatePickerCtrl(
            (wxWindow*)parent, wxID_ANY, wxDefaultDateTime,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxDatePickerCtrl",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxDatePickerCtrl");
        filter.AddWindowProperties();
        return filter.GetXfbObject();
    }
};

class TimePickerCtrlComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        return new wxTimePickerCtrl(
            (wxWindow*)parent, wxID_ANY, wxDefaultDateTime,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxTimePickerCtrl",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxTimePickerCtrl");
        filter.AddWindowProperties();
        return filter.GetXfbObject();
    }
};

class RichTextCtrlComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxString text = obj->GetPropertyAsString("value");

        wxRichTextCtrl* richText = new wxRichTextCtrl(
            (wxWindow*)parent, wxID_ANY, text,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        if (!text.empty())
            return richText;

        wxFont textFont = wxFont(12, wxFONTFAMILY_ROMAN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL);
        wxFont boldFont = wxFont(12, wxFONTFAMILY_ROMAN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD);
        wxFont italicFont = wxFont(12, wxFONTFAMILY_ROMAN, wxFONTSTYLE_ITALIC, wxFONTWEIGHT_NORMAL);

        wxFont font(12, wxFONTFAMILY_ROMAN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL);

        wxRichTextCtrl& r = *richText;
        r.SetFont(font);
        r.BeginSuppressUndo();

        r.BeginParagraphSpacing(0, 20);

        r.BeginAlignment(wxTEXT_ALIGNMENT_CENTRE);
        r.BeginBold();

        r.BeginFontSize(14);
        r.WriteText("Welcome to wxRichTextCtrl, a wxWidgets control for editing and presenting "
                    "styled text and images");
        r.EndFontSize();
        r.Newline();

        r.BeginItalic();
        r.WriteText("by Julian Smart");
        r.EndItalic();

        r.EndBold();

        r.Newline();
        r.WriteImage(wxBitmap(logo_xpm));

        r.EndAlignment();

        r.Newline();

        r.WriteText("What can you do with this thing? ");
        r.WriteImage(wxBitmap(smiley_xpm));
        r.WriteText(" Well, you can change text ");

        r.BeginTextColour(wxColour(255, 0, 0));
        r.WriteText("colour, like this red bit.");
        r.EndTextColour();

        r.BeginTextColour(wxColour(0, 0, 255));
        r.WriteText(" And this blue bit.");
        r.EndTextColour();

        r.WriteText(" Naturally you can make things ");
        r.BeginBold();
        r.WriteText("bold ");
        r.EndBold();
        r.BeginItalic();
        r.WriteText("or italic ");
        r.EndItalic();
        r.BeginUnderline();
        r.WriteText("or underlined.");
        r.EndUnderline();

        r.BeginFontSize(14);
        r.WriteText(" Different font sizes on the same line is allowed, too.");
        r.EndFontSize();

        r.WriteText(" Next we'll show an indented paragraph.");

        r.BeginLeftIndent(60);
        r.Newline();

        r.WriteText("Indented paragraph.");
        r.EndLeftIndent();

        r.Newline();

        r.WriteText(
            "Next, we'll show a first-line indent, achieved using BeginLeftIndent(100, -40).");

        r.BeginLeftIndent(100, -40);
        r.Newline();

        r.WriteText("It was in January, the most down-trodden month of an Edinburgh winter.");
        r.EndLeftIndent();

        r.Newline();

        r.WriteText("Numbered bullets are possible, again using subindents:");

        r.BeginNumberedBullet(1, 100, 60);
        r.Newline();

        r.WriteText("This is my first item. Note that wxRichTextCtrl doesn't automatically do "
                    "numbering, but this will be added later.");
        r.EndNumberedBullet();

        r.BeginNumberedBullet(2, 100, 60);
        r.Newline();

        r.WriteText("This is my second item.");
        r.EndNumberedBullet();

        r.Newline();

        r.WriteText("The following paragraph is right-indented:");

        r.BeginRightIndent(200);
        r.Newline();

        r.WriteText("It was in January, the most down-trodden month of an Edinburgh winter. An "
                    "attractive woman came into the cafe, which is nothing remarkable.");
        r.EndRightIndent();

        r.Newline();

        wxArrayInt tabs;
        tabs.Add(400);
        tabs.Add(600);
        tabs.Add(800);
        tabs.Add(1000);
        wxTextAttrEx attr;
        attr.SetFlags(wxTEXT_ATTR_TABS);
        attr.SetTabs(tabs);
        r.SetDefaultStyle(attr);

        r.WriteText("This line contains tabs:\tFirst tab\tSecond tab\tThird tab");

        r.Newline();
        r.WriteText("Other notable features of wxRichTextCtrl include:");

        r.BeginSymbolBullet('*', 100, 60);
        r.Newline();
        r.WriteText("Compatibility with wxTextCtrl API");
        r.EndSymbolBullet();

        r.WriteText("\nNote: this content was generated programmatically and copied from the "
                    "sample. The images were loaded from inline XPMs. Enjoy wxRichTextCtrl!");

        r.EndSuppressUndo();
        return richText;
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxRichTextCtrl",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("value", "value", XRC_TYPE_TEXT);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxRichTextCtrl");
        filter.AddWindowProperties();
        filter.AddProperty("value", "value", XRC_TYPE_TEXT);
        return filter.GetXfbObject();
    }
};

class HtmlWindowComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxHtmlWindow* htmlWindow = new wxHtmlWindow(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        wxString dummyPage(
            "<b>wxHtmlWindow</b><br />"
            "This is a dummy page.</body></html>");

        htmlWindow->SetPage(dummyPage);
        return htmlWindow;
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxHtmlWindow",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxHtmlWindow");
        filter.AddWindowProperties();
        return filter.GetXfbObject();
    }
};

class ToggleButtonComponent : public ComponentBase, public wxEvtHandler {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxString label = obj->GetPropertyAsString("label");

        wxToggleButton* toggleButton = new wxToggleButton(
            (wxWindow*)parent, wxID_ANY,
            label,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        if (obj->GetPropertyAsInteger("markup"))
            toggleButton->SetLabelMarkup(label);

        if (!obj->IsNull("bitmap"))
            toggleButton->SetBitmap(obj->GetPropertyAsBitmap("bitmap"));

        if (!obj->IsNull("disabled"))
            toggleButton->SetBitmapDisabled(obj->GetPropertyAsBitmap("disabled"));

        if (!obj->IsNull("pressed"))
            toggleButton->SetBitmapPressed(obj->GetPropertyAsBitmap("pressed"));

        if (!obj->IsNull("focus"))
            toggleButton->SetBitmapFocus(obj->GetPropertyAsBitmap("focus"));

        if (!obj->IsNull("current"))
            toggleButton->SetBitmapCurrent(obj->GetPropertyAsBitmap("current"));

        if (!obj->IsNull("position")) {
            toggleButton->SetBitmapPosition(
                static_cast<wxDirection>(obj->GetPropertyAsInteger("position")));
        }
        if (!obj->IsNull("margins"))
            toggleButton->SetBitmapMargins(obj->GetPropertyAsSize("margins"));

        toggleButton->SetValue((obj->GetPropertyAsInteger("value")));
        toggleButton->Bind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED,
                           &ToggleButtonComponent::OnToggle, this);
        return toggleButton;
    }

    void OnToggle(wxCommandEvent& event)
    {
        wxToggleButton* window = dynamic_cast<wxToggleButton*>(event.GetEventObject());
        if (!window)
            return;

        wxString value;
        value.Printf("%i", window->GetValue() ? 1 : 0);
        GetManager()->ModifyProperty(window, "value", value);
        window->SetFocus();
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxToggleButton",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();

        xrc.AddProperty("label", "label", XRC_TYPE_TEXT);
        xrc.AddProperty("markup", "markup", XRC_TYPE_BOOL);
        xrc.AddProperty("bitmap", "bitmap", XRC_TYPE_BITMAP);

        if (!obj->IsNull("disabled"))
            xrc.AddProperty("disabled", "disabled", XRC_TYPE_BITMAP);

        if (!obj->IsNull("pressed"))
            xrc.AddProperty("pressed", "pressed", XRC_TYPE_BITMAP);

        if (!obj->IsNull("focus"))
            xrc.AddProperty("focus", "focus", XRC_TYPE_BITMAP);

        if (!obj->IsNull("current"))
            xrc.AddProperty("current", "current", XRC_TYPE_BITMAP);

        if (!obj->IsNull("position"))
            xrc.AddProperty("position", "position", XRC_TYPE_TEXT);

        if (!obj->IsNull("margins"))
            xrc.AddProperty("margins", "margins", XRC_TYPE_SIZE);

        xrc.AddProperty("value", "checked", XRC_TYPE_BOOL);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxToggleButton");
        filter.AddWindowProperties();
        filter.AddProperty("label", "label", XRC_TYPE_TEXT);
        filter.AddProperty("markup", "markup", XRC_TYPE_BOOL);
        filter.AddProperty("bitmap", "bitmap", XRC_TYPE_BITMAP);
        filter.AddProperty("disabled", "disabled", XRC_TYPE_BITMAP);
        filter.AddProperty("pressed", "pressed", XRC_TYPE_BITMAP);
        filter.AddProperty("focus", "focus", XRC_TYPE_BITMAP);
        filter.AddProperty("current", "current", XRC_TYPE_BITMAP);
        filter.AddProperty("position", "position", XRC_TYPE_TEXT);
        filter.AddProperty("margins", "margins", XRC_TYPE_SIZE);
        filter.AddProperty("checked", "value", XRC_TYPE_BOOL);
        return filter.GetXfbObject();
    }
};

class BitmapToggleButtonComponent : public ComponentBase, public wxEvtHandler {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxBitmapToggleButton* bmpToggleBtn = new wxBitmapToggleButton(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsBitmap("bitmap"),
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        // To stay in sync what the generator templates do apply the markup label here as well
        if (obj->GetPropertyAsInteger("markup"))
            bmpToggleBtn->SetLabelMarkup(obj->GetPropertyAsString("label"));

        if (!obj->IsNull("disabled"))
            bmpToggleBtn->SetBitmapDisabled(obj->GetPropertyAsBitmap("disabled"));

        if (!obj->IsNull("pressed"))
            bmpToggleBtn->SetBitmapPressed(obj->GetPropertyAsBitmap("pressed"));

        if (!obj->IsNull("focus"))
            bmpToggleBtn->SetBitmapFocus(obj->GetPropertyAsBitmap("focus"));

        if (!obj->IsNull("current"))
            bmpToggleBtn->SetBitmapCurrent(obj->GetPropertyAsBitmap("current"));

        if (!obj->IsNull("position")) {
            bmpToggleBtn->SetBitmapPosition(
                static_cast<wxDirection>(obj->GetPropertyAsInteger("position")));
        }
        if (!obj->IsNull("margins"))
            bmpToggleBtn->SetBitmapMargins(obj->GetPropertyAsSize("margins"));

        bmpToggleBtn->SetValue((obj->GetPropertyAsInteger("value")));
        bmpToggleBtn->Bind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED,
                           &BitmapToggleButtonComponent::OnToggle, this);
        return bmpToggleBtn;
    }

    void OnToggle(wxCommandEvent& event)
    {
        wxBitmapToggleButton* bmpToggleBtn
            = dynamic_cast<wxBitmapToggleButton*>(event.GetEventObject());
        if (!bmpToggleBtn)
            return;

        wxString value;
        value.Printf("%i", bmpToggleBtn->GetValue() ? 1 : 0);
        GetManager()->ModifyProperty(bmpToggleBtn, "value", value);
        bmpToggleBtn->SetFocus();
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxBitmapToggleButton",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();

        xrc.AddProperty("bitmap", "bitmap", XRC_TYPE_BITMAP);

        if (!obj->IsNull("disabled"))
            xrc.AddProperty("disabled", "disabled", XRC_TYPE_BITMAP);

        if (!obj->IsNull("pressed"))
            xrc.AddProperty("pressed", "pressed", XRC_TYPE_BITMAP);

        if (!obj->IsNull("focus"))
            xrc.AddProperty("focus", "focus", XRC_TYPE_BITMAP);

        if (!obj->IsNull("current"))
            xrc.AddProperty("current", "current", XRC_TYPE_BITMAP);

        if (!obj->IsNull("position"))
            xrc.AddProperty("position", "position", XRC_TYPE_TEXT);

        if (!obj->IsNull("margins"))
            xrc.AddProperty("margins", "margins", XRC_TYPE_SIZE);

        xrc.AddProperty("value", "checked", XRC_TYPE_BOOL);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxBitmapToggleButton");
        filter.AddWindowProperties();
        filter.AddProperty("bitmap", "bitmap", XRC_TYPE_BITMAP);
        filter.AddProperty("disabled", "disabled", XRC_TYPE_BITMAP);
        filter.AddProperty("pressed", "pressed", XRC_TYPE_BITMAP);
        filter.AddProperty("focus", "focus", XRC_TYPE_BITMAP);
        filter.AddProperty("current", "current", XRC_TYPE_BITMAP);
        filter.AddProperty("position", "position", XRC_TYPE_TEXT);
        filter.AddProperty("margins", "margins", XRC_TYPE_SIZE);
        filter.AddProperty("checked", "value", XRC_TYPE_BOOL);
        return filter.GetXfbObject();
    }
};

class TreeCtrlComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        int style = obj->GetPropertyAsInteger("style");

        wxTreeCtrl* treeCtrl = new wxTreeCtrl(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            style | obj->GetPropertyAsInteger("window_style"));

        // dummy nodes
        wxTreeItemId root = treeCtrl->AddRoot("root node");
        wxTreeItemId node1 = treeCtrl->AppendItem(root, "node1");
        wxTreeItemId node2 = treeCtrl->AppendItem(root, "node2");
        wxTreeItemId node3 = treeCtrl->AppendItem(node2, "node3");

        if (!(style & wxTR_HIDE_ROOT))
            treeCtrl->Expand(root);

        treeCtrl->Expand(node1);
        treeCtrl->Expand(node2);
        treeCtrl->Expand(node3);
        return treeCtrl;
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxTreeCtrl",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxTreeCtrl");
        filter.AddWindowProperties();
        return filter.GetXfbObject();
    }
};

class ScrollBarComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxScrollBar* scrollBar = new wxScrollBar(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        scrollBar->SetScrollbar(obj->GetPropertyAsInteger("value"),
                                obj->GetPropertyAsInteger("thumbsize"),
                                obj->GetPropertyAsInteger("range"),
                                obj->GetPropertyAsInteger("pagesize"));
        return scrollBar;
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxScrollBar",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("value", "value", XRC_TYPE_INTEGER);
        xrc.AddProperty("thumbsize", "thumbsize", XRC_TYPE_INTEGER);
        xrc.AddProperty("range", "range", XRC_TYPE_INTEGER);
        xrc.AddProperty("pagesize", "pagesize", XRC_TYPE_INTEGER);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxScrollBar");
        filter.AddWindowProperties();
        filter.AddProperty("value", "value", XRC_TYPE_INTEGER);
        filter.AddProperty("thumbsize", "thumbsize", XRC_TYPE_INTEGER);
        filter.AddProperty("range", "range", XRC_TYPE_INTEGER);
        filter.AddProperty("pagesize", "pagesize", XRC_TYPE_INTEGER);
        return filter.GetXfbObject();
    }
};

class SpinCtrlComponent : public ComponentBase, public wxEvtHandler {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        int max = obj->GetPropertyAsInteger("max");
        int min = obj->GetPropertyAsInteger("min");

        wxSpinCtrl* spinCtrl = new wxSpinCtrl(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsString("value"),
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"),
            min < max ? min : max, max,
            obj->GetPropertyAsInteger("initial"));

        spinCtrl->Bind(wxEVT_COMMAND_SPINCTRL_UPDATED,
                       &SpinCtrlComponent::OnSpin, this);
        return spinCtrl;
    }

    void OnSpin(wxSpinEvent& event)
    {
        wxSpinCtrl* spinCtrl = dynamic_cast<wxSpinCtrl*>(event.GetEventObject());
        if (!spinCtrl)
            return;

        wxString value;
        value.Printf("%i", spinCtrl->GetValue());
        GetManager()->ModifyProperty(spinCtrl, "initial", value);
        spinCtrl->SetFocus();
    }

    void Cleanup(wxObject* obj) override
    {
        wxSpinCtrl* spinCtrl = dynamic_cast<wxSpinCtrl*>(obj);
        if (!spinCtrl)
            return;

        spinCtrl->Unbind(wxEVT_COMMAND_SPINCTRL_UPDATED,
                         &SpinCtrlComponent::OnSpin, this);
        ComponentBase::Cleanup(obj);
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxSpinCtrl",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("initial", "value", XRC_TYPE_TEXT);
        xrc.AddProperty("min", "min", XRC_TYPE_INTEGER);
        xrc.AddProperty("max", "max", XRC_TYPE_INTEGER);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxSpinCtrl");
        filter.AddWindowProperties();
        filter.AddProperty("value", "value", XRC_TYPE_TEXT);
        filter.AddProperty("value", "initial", XRC_TYPE_TEXT);
        filter.AddProperty("min", "min", XRC_TYPE_INTEGER);
        filter.AddProperty("max", "max", XRC_TYPE_INTEGER);
        return filter.GetXfbObject();
    }
};

class SpinCtrlDoubleComponent : public ComponentBase, public wxEvtHandler {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxSpinCtrlDouble* spinCtrlDouble = new wxSpinCtrlDouble(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsString("value"),
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"),
            obj->GetPropertyAsFloat("min"),
            obj->GetPropertyAsFloat("max"),
            obj->GetPropertyAsFloat("initial"),
            obj->GetPropertyAsFloat("inc"));

        spinCtrlDouble->SetDigits(obj->GetPropertyAsInteger("digits"));
        spinCtrlDouble->Bind(wxEVT_COMMAND_SPINCTRLDOUBLE_UPDATED,
                             &SpinCtrlDoubleComponent::OnSpin, this);
        return spinCtrlDouble;
    }

    void OnSpin(wxSpinDoubleEvent& event)
    {
        wxSpinCtrlDouble* spinCtrlDouble
            = dynamic_cast<wxSpinCtrlDouble*>(event.GetEventObject());
        if (!spinCtrlDouble)
            return;

        wxString value;
        value.Printf("%f", spinCtrlDouble->GetValue());
        GetManager()->ModifyProperty(spinCtrlDouble, "initial", value);
        spinCtrlDouble->SetFocus();
    }

    void Cleanup(wxObject* obj) override
    {
        wxSpinCtrlDouble* spinCtrlDouble = dynamic_cast<wxSpinCtrlDouble*>(obj);
        if (!spinCtrlDouble)
            return;

        spinCtrlDouble->Unbind(wxEVT_COMMAND_SPINCTRLDOUBLE_UPDATED,
                               &SpinCtrlDoubleComponent::OnSpin, this);
        ComponentBase::Cleanup(obj);
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxSpinCtrlDouble",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("initial", "value", XRC_TYPE_TEXT);
        xrc.AddProperty("min", "min", XRC_TYPE_INTEGER);
        xrc.AddProperty("max", "max", XRC_TYPE_INTEGER);
        xrc.AddProperty("inc", "inc", XRC_TYPE_FLOAT);
        xrc.AddProperty("digits", "digits", XRC_TYPE_INTEGER);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxSpinCtrlDouble");
        filter.AddWindowProperties();
        filter.AddProperty("value", "value", XRC_TYPE_TEXT);
        filter.AddProperty("value", "initial", XRC_TYPE_TEXT);
        filter.AddProperty("min", "min", XRC_TYPE_INTEGER);
        filter.AddProperty("max", "max", XRC_TYPE_INTEGER);
        filter.AddProperty("inc", "inc", XRC_TYPE_FLOAT);
        filter.AddProperty("digits", "digits", XRC_TYPE_INTEGER);
        return filter.GetXfbObject();
    }
};

class SpinButtonComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        return new wxSpinButton(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxSpinButton",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxSpinButton");
        filter.AddWindowProperties();
        return filter.GetXfbObject();
    }
};

class CheckListBoxComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxArrayString choices(obj->GetPropertyAsArrayString("choices"));

        wxCheckListBox* chkListBox = new wxCheckListBox(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"), choices,
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        return chkListBox;
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxCheckListBox",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("choices", "content", XRC_TYPE_STRINGLIST);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxCheckListBox");
        filter.AddWindowProperties();
        filter.AddProperty("content", "choices", XRC_TYPE_STRINGLIST);
        return filter.GetXfbObject();
    }
};

class GridComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxGrid* grid = new wxGrid(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("window_style"));

        grid->CreateGrid(
            obj->GetPropertyAsInteger("rows"), obj->GetPropertyAsInteger("cols"));

        grid->EnableDragColMove(obj->GetPropertyAsInteger("drag_col_move"));
        grid->EnableDragColSize(obj->GetPropertyAsInteger("drag_col_size"));
        grid->EnableDragGridSize(obj->GetPropertyAsInteger("drag_grid_size"));
        grid->EnableDragRowSize(obj->GetPropertyAsInteger("drag_row_size"));
        grid->EnableEditing(obj->GetPropertyAsInteger("editing"));
        grid->EnableGridLines(obj->GetPropertyAsInteger("grid_lines"));

        if (!obj->IsNull("grid_line_color"))
            grid->SetGridLineColour(obj->GetPropertyAsColour("grid_line_color"));

        grid->SetMargins(obj->GetPropertyAsInteger("margin_width"),
                         obj->GetPropertyAsInteger("margin_height"));

        // Label Properties
        grid->SetColLabelAlignment(obj->GetPropertyAsInteger("col_label_horiz_alignment"),
                                   obj->GetPropertyAsInteger("col_label_vert_alignment"));

        wxArrayString columnLabels = obj->GetPropertyAsArrayString("col_label_values");
        for (int i = 0; i < (int)columnLabels.size() && i < grid->GetNumberCols(); ++i)
            grid->SetColLabelValue(i, columnLabels[i]);

        if (!obj->IsNull("col_label_size"))
            grid->SetColLabelSize(obj->GetPropertyAsInteger("col_label_size"));

        wxArrayInt columnSizes = obj->GetPropertyAsArrayInt("column_sizes");
        for (int i = 0; i < (int)columnSizes.size() && i < grid->GetNumberCols(); ++i)
            grid->SetColSize(i, columnSizes[i]);

        grid->SetRowLabelAlignment(obj->GetPropertyAsInteger("row_label_horiz_alignment"),
                                   obj->GetPropertyAsInteger("row_label_vert_alignment"));

        wxArrayString rowLabels = obj->GetPropertyAsArrayString("row_label_values");
        for (int i = 0; i < (int)rowLabels.size() && i < grid->GetNumberRows(); ++i)
            grid->SetRowLabelValue(i, rowLabels[i]);

        if (!obj->IsNull("row_label_size"))
            grid->SetRowLabelSize(obj->GetPropertyAsInteger("row_label_size"));

        wxArrayInt rowSizes = obj->GetPropertyAsArrayInt("row_sizes");
        for (int i = 0; i < (int)rowSizes.size() && i < grid->GetNumberRows(); ++i)
            grid->SetRowSize(i, rowSizes[i]);

        if (!obj->IsNull("label_bg"))
            grid->SetLabelBackgroundColour(obj->GetPropertyAsColour("label_bg"));

        if (!obj->IsNull("label_text"))
            grid->SetLabelTextColour(obj->GetPropertyAsColour("label_text"));

        if (!obj->IsNull("label_font"))
            grid->SetLabelFont(obj->GetPropertyAsFont("label_font"));

        // Default Cell Properties
        grid->SetDefaultCellAlignment(obj->GetPropertyAsInteger("cell_horiz_alignment"),
                                      obj->GetPropertyAsInteger("cell_vert_alignment"));

        if (!obj->IsNull("cell_bg"))
            grid->SetDefaultCellBackgroundColour(obj->GetPropertyAsColour("cell_bg"));

        if (!obj->IsNull("cell_text"))
            grid->SetDefaultCellTextColour(obj->GetPropertyAsColour("cell_text"));

        if (!obj->IsNull("cell_font"))
            grid->SetDefaultCellFont(obj->GetPropertyAsFont("cell_font"));

        // Example Cell Values
        for (int col = 0; col < grid->GetNumberCols(); ++col) {
            for (int row = 0; row < grid->GetNumberRows(); ++row) {
                grid->SetCellValue(
                    row, col, grid->GetColLabelValue(col) + '-' + grid->GetRowLabelValue(row));
            }
        }
        if (obj->GetPropertyAsInteger("autosize_rows"))
            grid->AutoSizeRows();

        if (obj->GetPropertyAsInteger("autosize_cols"))
            grid->AutoSizeColumns();

        grid->PushEventHandler(new ComponentEvtHandler(grid, GetManager()));

        return grid;
    }

    void Cleanup(wxObject* obj) override
    {
        wxGrid* grid = wxDynamicCast(obj, wxGrid);
        if (grid)
            grid->PopEventHandler(true);
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxGrid", obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxGrid");
        filter.AddWindowProperties();
        return filter.GetXfbObject();
    }
};

void ComponentEvtHandler::OnGridClick(wxGridEvent& event)
{
    m_manager->SelectObject(m_window);
    event.Skip();
}

void ComponentEvtHandler::OnGridColSize(wxGridSizeEvent&)
{
    wxGrid* grid = wxDynamicCast(m_window, wxGrid);
    if (!grid)
        return;

    wxString sizes;
    for (int i = 0; i < grid->GetNumberCols(); ++i)
        sizes += wxString::Format("%i,", grid->GetColSize(i));

    sizes = sizes.substr(0, sizes.length() - 1);

    m_manager->ModifyProperty(m_window, "column_sizes", sizes, true);
}

void ComponentEvtHandler::OnGridRowSize(wxGridSizeEvent&)
{
    wxGrid* grid = wxDynamicCast(m_window, wxGrid);
    if (!grid)
        return;

    wxString sizes;
    for (int i = 0; i < grid->GetNumberRows(); ++i)
        sizes += wxString::Format("%i,", grid->GetRowSize(i));

    sizes = sizes.substr(0, sizes.length() - 1);

    m_manager->ModifyProperty(m_window, "row_sizes", sizes, true);
}

class PickerComponentBase : public ComponentBase, public wxEvtHandler {
public:
    void OnLeftClick(wxMouseEvent& event)
    {
        wxWindow* window = dynamic_cast<wxWindow*>(event.GetEventObject());
        wxPickerBase* picker = dynamic_cast<wxPickerBase*>(window->GetParent());
        if (!picker)
            return;

        if (!GetManager()->SelectObject(picker))
            event.Skip();
    }

    void OnCreated(wxObject* wxobject, wxWindow* /*wxparent*/) override
    {
        wxPickerBase* picker = dynamic_cast<wxPickerBase*>(wxobject);
        if (!picker)
            return;

        picker->GetPickerCtrl()->Bind(wxEVT_LEFT_DOWN,
                                      &PickerComponentBase::OnLeftClick, this);

        wxTextCtrl* textCtrl = picker->GetTextCtrl();
        if (!textCtrl)
            return;

        textCtrl->Bind(wxEVT_LEFT_DOWN, &PickerComponentBase::OnLeftClick, this);
    }

    void Cleanup(wxObject* obj) override
    {
        wxPickerBase* picker = dynamic_cast<wxPickerBase*>(obj);
        if (!picker)
            return;

        picker->GetPickerCtrl()->Unbind(wxEVT_LEFT_DOWN,
                                        &PickerComponentBase::OnLeftClick, this);

        wxTextCtrl* textCtrl = picker->GetTextCtrl();
        if (!textCtrl)
            return;

        textCtrl->Unbind(wxEVT_LEFT_DOWN, &PickerComponentBase::OnLeftClick, this);

        ComponentBase::Cleanup(obj);
    }
};

class ColourPickerComponent : public PickerComponentBase {
private:
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxColourPickerCtrl* colourPicker = new wxColourPickerCtrl(
            (wxWindow*)parent,
            obj->GetPropertyAsInteger("id"),
            obj->GetPropertyAsColour("colour"),
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        colourPicker->PushEventHandler(
            new ComponentEvtHandler(colourPicker, GetManager()));

        return colourPicker;
    }

    void Cleanup(wxObject* obj) override
    {
        wxColourPickerCtrl* colourPicker = wxDynamicCast(obj, wxColourPickerCtrl);
        if (colourPicker)
            colourPicker->PopEventHandler(true);
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxColourPickerCtrl",
                              obj->GetPropertyAsString("name"));

        xrc.AddProperty("colour", "value", XRC_TYPE_COLOUR);
        xrc.AddWindowProperties();
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxColourPickerCtrl");
        filter.AddProperty("value", "colour", XRC_TYPE_COLOUR);
        filter.AddWindowProperties();
        return filter.GetXfbObject();
    }
};

void ComponentEvtHandler::OnColourPickerColourChanged(wxColourPickerEvent&)
{
    wxColourPickerCtrl* colourPicker = wxDynamicCast(m_window, wxColourPickerCtrl);
    if (!colourPicker)
        return;

    wxColour colour = colourPicker->GetColour();

    m_manager->ModifyProperty(
        colourPicker, "colour",
        wxString::Format("%d,%d,%d",
                         colour.Red(),
                         colour.Green(),
                         colour.Blue()));
}

class FontPickerComponent : public PickerComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxFontPickerCtrl* fontPicker = new wxFontPickerCtrl(
            (wxWindow*)parent,
            obj->GetPropertyAsInteger("id"),
            obj->GetPropertyAsFont("value"),
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        if (!obj->IsNull("max_point_size"))
            fontPicker->SetMaxPointSize(obj->GetPropertyAsInteger("max_point_size"));

        fontPicker->PushEventHandler(new ComponentEvtHandler(fontPicker, GetManager()));
        return fontPicker;
    }

    void Cleanup(wxObject* obj) override
    {
        wxFontPickerCtrl* fontPicker = wxDynamicCast(obj, wxFontPickerCtrl);
        if (fontPicker)
            fontPicker->PopEventHandler(true);
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxFontPickerCtrl",
                              obj->GetPropertyAsString("name"));

        if (!obj->IsNull("value"))
            xrc.AddProperty("value", "value", XRC_TYPE_FONT);

        xrc.AddWindowProperties();
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxFontPickerCtrl");
        filter.AddProperty("value", "value", XRC_TYPE_FONT);
        filter.AddWindowProperties();
        return filter.GetXfbObject();
    }
};

void ComponentEvtHandler::OnFontPickerFontChanged(wxFontPickerEvent&)
{
    wxFontPickerCtrl* fontPicker = wxDynamicCast(m_window, wxFontPickerCtrl);
    if (!fontPicker)
        return;

    wxFont font = fontPicker->GetSelectedFont();

    m_manager->ModifyProperty(
        fontPicker, "value",
        wxString::Format("%s,%d,%d,%d",
                         font.GetFaceName().c_str(),
                         font.GetStyle(),
                         font.GetWeight(),
                         font.GetPointSize()));
}

class FilePickerComponent : public PickerComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxFilePickerCtrl* filePicker = new wxFilePickerCtrl(
            (wxWindow*)parent,
            obj->GetPropertyAsInteger("id"),
            obj->GetPropertyAsString("value"),
            obj->GetPropertyAsString("message"),
            obj->GetPropertyAsString("wildcard"),
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        filePicker->PushEventHandler(new ComponentEvtHandler(filePicker, GetManager()));
        return filePicker;
    }

    void Cleanup(wxObject* obj) override
    {
        wxFilePickerCtrl* filePicker = wxDynamicCast(obj, wxFilePickerCtrl);
        if (filePicker)
            filePicker->PopEventHandler(true);
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxFilePickerCtrl",
                              obj->GetPropertyAsString("name"));
        xrc.AddProperty("value", "value", XRC_TYPE_TEXT);
        xrc.AddProperty("message", "message", XRC_TYPE_TEXT);
        xrc.AddProperty("wildcard", "wildcard", XRC_TYPE_TEXT);
        xrc.AddWindowProperties();
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxFilePickerCtrl");
        filter.AddProperty("value", "value", XRC_TYPE_TEXT);
        filter.AddProperty("message", "message", XRC_TYPE_TEXT);
        filter.AddProperty("wildcard", "wildcard", XRC_TYPE_TEXT);
        filter.AddWindowProperties();
        return filter.GetXfbObject();
    }
};

void ComponentEvtHandler::OnFilePickerFileChanged(wxFileDirPickerEvent&)
{
    wxFilePickerCtrl* filePicker = wxDynamicCast(m_window, wxFilePickerCtrl);
    if (filePicker)
        m_manager->ModifyProperty(filePicker, "value", filePicker->GetPath());
}

class DirPickerComponent : public PickerComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxDirPickerCtrl* dirPicker = new wxDirPickerCtrl(
            (wxWindow*)parent,
            obj->GetPropertyAsInteger("id"),
            obj->GetPropertyAsString("value"),
            obj->GetPropertyAsString("message"),
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        dirPicker->PushEventHandler(new ComponentEvtHandler(dirPicker, GetManager()));
        return dirPicker;
    }

    void Cleanup(wxObject* obj) override
    {
        wxDirPickerCtrl* dirPicker = wxDynamicCast(obj, wxDirPickerCtrl);
        if (dirPicker)
            dirPicker->PopEventHandler(true);
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxDirPickerCtrl",
                              obj->GetPropertyAsString("name"));

        xrc.AddProperty("value", "value", XRC_TYPE_TEXT);
        xrc.AddProperty("message", "message", XRC_TYPE_TEXT);
        xrc.AddWindowProperties();
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxDirPickerCtrl");
        filter.AddProperty("value", "value", XRC_TYPE_TEXT);
        filter.AddProperty("message", "message", XRC_TYPE_TEXT);
        filter.AddWindowProperties();
        return filter.GetXfbObject();
    }
};

void ComponentEvtHandler::OnDirPickerDirChanged(wxFileDirPickerEvent&)
{
    wxDirPickerCtrl* dirPicker = wxDynamicCast(m_window, wxDirPickerCtrl);
    if (dirPicker)
        m_manager->ModifyProperty(dirPicker, "value", dirPicker->GetPath());
}

class HyperlinkComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxHyperlinkCtrl* linkCtrl = new wxHyperlinkCtrl(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsString("label"),
            obj->GetPropertyAsString("url"),
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        if (!obj->IsNull("hover_color"))
            linkCtrl->SetHoverColour(obj->GetPropertyAsColour("hover_color"));

        if (!obj->IsNull("normal_color"))
            linkCtrl->SetNormalColour(obj->GetPropertyAsColour("normal_color"));

        if (!obj->IsNull("visited_color"))
            linkCtrl->SetVisitedColour(obj->GetPropertyAsColour("visited_color"));

        return linkCtrl;
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxHyperlinkCtrl",
                              obj->GetPropertyAsString("name"));

        xrc.AddProperty("label", "label", XRC_TYPE_TEXT);
        xrc.AddPropertyValue("url", obj->GetPropertyAsString("url"));
        xrc.AddWindowProperties();
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxHyperlinkCtrl");
        filter.AddProperty("label", "label", XRC_TYPE_TEXT);

        try {
            ticpp::Element* urlElement = xrcObj->FirstChildElement("url");
            wxString url(urlElement->GetText().c_str(), wxConvUTF8);

            filter.AddPropertyValue("url", url);
        } catch (ticpp::Exception&) {
        }

        filter.AddWindowProperties();
        return filter.GetXfbObject();
    }
};

class GenericDirCtrlComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxGenericDirCtrl* dirCtrl = new wxGenericDirCtrl(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsString("defaultfolder"),
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"),
            obj->GetPropertyAsString("filter"),
            obj->GetPropertyAsInteger("defaultfilter"));

        dirCtrl->ShowHidden(obj->GetPropertyAsInteger("show_hidden"));
        dirCtrl->GetTreeCtrl()->PushEventHandler(
            new GenericDirCtrlEvtHandler(dirCtrl, GetManager()));
        return dirCtrl;
    }

    void Cleanup(wxObject* obj) override
    {
        wxGenericDirCtrl* dirCtrl = wxDynamicCast(obj, wxGenericDirCtrl);
        if (dirCtrl)
            dirCtrl->GetTreeCtrl()->PopEventHandler(true);
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxGenericDirCtrl",
                              obj->GetPropertyAsString("name"));

        xrc.AddProperty("defaultfolder", "defaultfolder", XRC_TYPE_TEXT);
        xrc.AddProperty("filter", "filter", XRC_TYPE_TEXT);
        xrc.AddProperty("defaultfilter", "defaultfilter", XRC_TYPE_INTEGER);
        xrc.AddWindowProperties();
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxGenericDirCtrl");
        filter.AddProperty("defaultfolder", "defaultfolder", XRC_TYPE_TEXT);
        filter.AddProperty("filter", "filter", XRC_TYPE_TEXT);
        filter.AddProperty("defaultfilter", "defaultfilter", XRC_TYPE_INTEGER);
        filter.AddWindowProperties();
        return filter.GetXfbObject();
    }
};

void GenericDirCtrlEvtHandler::OnGenericDirCtrlLeftClick(wxMouseEvent& event)
{
    m_manager->SelectObject(m_window);
    event.Skip();
}

class CustomControlComponent : public ComponentBase {
public:
    wxObject* Create(IObject* /*obj*/, wxObject* parent) override
    {
        return new wxPanel(
            (wxWindow*)parent, wxID_ANY,
            wxDefaultPosition, wxDefaultSize, 0);
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, obj->GetPropertyAsString("class"),
                              obj->GetPropertyAsString("name"));
        return xrc.GetXrcObject();
    }
};

class SearchCtrlComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxSearchCtrl* searchCtrl = new wxSearchCtrl(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsString("value"),
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        if (!obj->IsNull("search_button"))
            searchCtrl->ShowSearchButton(obj->GetPropertyAsInteger("search_button"));

        if (!obj->IsNull("cancel_button"))
            searchCtrl->ShowCancelButton(obj->GetPropertyAsInteger("cancel_button"));

        searchCtrl->PushEventHandler(new ComponentEvtHandler(searchCtrl, GetManager()));
        return searchCtrl;
    }

    void Cleanup(wxObject* obj) override
    {
        wxSearchCtrl* searchCtrl = wxDynamicCast(obj, wxSearchCtrl);
        if (searchCtrl)
            searchCtrl->PopEventHandler(true);
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxSearchCtrl",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("value", "value", XRC_TYPE_TEXT);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxSearchCtrl");
        filter.AddWindowProperties();
        filter.AddProperty("value", "value", XRC_TYPE_TEXT);
        return filter.GetXfbObject();
    }
};

void ComponentEvtHandler::OnText(wxCommandEvent& event)
{
    wxSearchCtrl* searchCtrl = wxDynamicCast(m_window, wxSearchCtrl);
    if (searchCtrl) {
        m_manager->ModifyProperty(m_window, "value", searchCtrl->GetValue());
        searchCtrl->SetInsertionPointEnd();
        searchCtrl->SetFocus();
    }
    event.Skip();
}

#ifdef USE_MEDIACTRL
class MediaCtrlComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxMediaCtrl* mediaCtrl = new wxMediaCtrl(
            (wxWindow*)parent, wxID_ANY, "",
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        if (!obj->IsNull("file")) {
            if (mediaCtrl->Load(obj->GetPropertyAsString("file"))) {

                if (!obj->IsNull("playback_rate")) {
                    mediaCtrl->SetPlaybackRate(
                        obj->GetPropertyAsFloat("playback_rate"));
                }
                if (!obj->IsNull("volume")
                    && (obj->GetPropertyAsFloat("volume") >= 0)
                    && (obj->GetPropertyAsFloat("volume") <= 1))
                    mediaCtrl->SetPlaybackRate(obj->GetPropertyAsFloat("volume"));

                if (!obj->IsNull("player_controls")) {
                    if (obj->GetPropertyAsString("player_controls") == "STEP")
                        mediaCtrl->ShowPlayerControls(wxMEDIACTRLPLAYERCONTROLS_STEP);
                    if (obj->GetPropertyAsString("player_controls") == "VOLUME")
                        mediaCtrl->ShowPlayerControls(wxMEDIACTRLPLAYERCONTROLS_VOLUME);
                    if (obj->GetPropertyAsString("player_controls") == "DEFAULT")
                        mediaCtrl->ShowPlayerControls(wxMEDIACTRLPLAYERCONTROLS_DEFAULT);
                    if (obj->GetPropertyAsString("player_controls") == "NONE")
                        mediaCtrl->ShowPlayerControls(wxMEDIACTRLPLAYERCONTROLS_NONE);
                }

                if (!obj->IsNull("play")
                    && (obj->GetPropertyAsInteger("play") == 1)) {
                    mediaCtrl->Play();
                } else {
                    mediaCtrl->Stop();
                }
#if 0
                GetManager()->ModifyProperty(m_window, "size", mediaCtrl->GetBestSize());
#endif
            }
        }
        if (!obj->IsNull("style"))
            mediaCtrl->ShowPlayerControls(wxMEDIACTRLPLAYERCONTROLS_STEP);

        mediaCtrl->PushEventHandler(new ComponentEvtHandler(mediaCtrl, GetManager()));
        return mediaCtrl;
    }

    void Cleanup(wxObject* obj) override
    {
        wxMediaCtrl* mediaCtrl = wxDynamicCast(obj, wxMediaCtrl);
        if (mediaCtrl)
            mediaCtrl->PopEventHandler(true);
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxMediaCtrl",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxMediaCtrl");
        filter.AddWindowProperties();
        return filter.GetXfbObject();
    }
};
#endif

// TODO: ???
class TimerComponent : public ComponentBase {
};

class PropertyGridComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxPropertyGrid* propGrid = new wxPropertyGrid(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        if (!obj->GetPropertyAsString("extra_style").empty()) {
            propGrid->SetExtraStyle(obj->GetPropertyAsInteger("extra_style"));
        }
        return propGrid;
    }
#if 0
    void Cleanup(wxObject*)
    {
        // Prevent assert for missing event handler
    }
#endif
    void OnCreated(wxObject* wxobject, wxWindow* /*wxparent*/) override
    {
        wxPropertyGrid* propGrid = wxDynamicCast(wxobject, wxPropertyGrid);
        if (!propGrid)
            return;

        size_t count = GetManager()->GetChildCount(wxobject);

        for (size_t i = 0; i < count; ++i) {

            wxObject* child = GetManager()->GetChild(wxobject, i);
            IObject* childObj = GetManager()->GetIObject(child);

            if (childObj->GetClassName() != "propGridItem")
                continue;

            if (childObj->GetPropertyAsString("type") == "Category") {
                propGrid->Append(new wxPropertyCategory(
                    childObj->GetPropertyAsString("label"),
                    childObj->GetPropertyAsString("label")));
            } else {
                wxPGProperty* property = wxDynamicCast(
                    wxCreateDynamicObject(
                        "wx"
                        + (childObj->GetPropertyAsString("type"))
                        + "Property"),
                    wxPGProperty);
                if (!property)
                    continue;

                property->SetLabel(childObj->GetPropertyAsString("label"));
                property->SetName(childObj->GetPropertyAsString("label"));
                propGrid->Append(property);

                if (childObj->GetPropertyAsString("help") != wxEmptyString) {
                    propGrid->SetPropertyHelpString(
                        property, childObj->GetPropertyAsString("help"));
                }
            }
        }
    }
};

class PropertyGridManagerComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxPropertyGridManager* propGridMgr = new wxPropertyGridManager(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        if (!obj->GetPropertyAsString("extra_style").empty())
            propGridMgr->SetExtraStyle(obj->GetPropertyAsInteger("extra_style"));

        propGridMgr->ShowHeader(obj->GetPropertyAsInteger("show_header"));
#if 0
        // Adding a page sets target page to the one added, so
        // we don't have to call SetTargetPage if we are filling
        // it right after adding.
        wxPropertyGridPage* pgPage = propGridMgr->AddPage(_("First Page"));

        pgPage->Append(new wxPropertyCategory(_("Sample Category")));

        // Add string property
        wxPGProperty* id = pgPage->Append(
            new wxStringProperty(_("Label"), _("Initial Value")));

        pgPage->SetPropertyHelpString(id, _("A string property"));

        // Add int property
        pgPage->Append(new wxIntProperty("IntProperty", wxPG_LABEL, 12345678));

        // Add float property (value type is actually double)
        pgPage->Append(new wxFloatProperty("FloatProperty", wxPG_LABEL, 12345.678));

        // Add a bool property
        pgPage->Append(new wxBoolProperty("BoolProperty", wxPG_LABEL, false));
        pgPage->Append(new wxBoolProperty("BoolPropertyAsCheckbox", wxPG_LABEL, true));
        pgPage->SetPropertyAttribute(
            "BoolPropertyAsCheckbox", wxPG_BOOL_USE_CHECKBOX, (long)1);

        // Add an enum property
        wxArrayString strings;
        strings.Add(_("Herbivore"));
        strings.Add(_("Carnivore"));
        strings.Add(_("Omnivore"));

        wxArrayInt indexes;
        indexes.Add(0);
        indexes.Add(1);
        indexes.Add(2);

        pgPage->Append(
            new wxEnumProperty(
                "EnumProperty", wxPG_LABEL, strings, indexes, 0));

        pgPage->Append(new wxPropertyCategory(_("Low Priority Properties")));

        // A string property that can be edited in a separate editor dialog.
        pgPage->Append(
            new wxLongStringProperty(
                "LongStringProperty", wxPG_LABEL,
                _("This is much longer string than the ")
                    + _("first one. Edit it by clicking the button.")));

        // String editor with dir selector button.
        pgPage->Append(new wxDirProperty(
            "DirProperty", wxPG_LABEL, ::wxGetUserHome()));

        // A file selector property.
        pgPage->Append(new wxFileProperty(
            "FileProperty", wxPG_LABEL, wxEmptyString));

        wxPropertyGridPage* pgPage2 = propGridMgr->AddPage("Second Page");

        pgPage2->Append(new wxPropertyCategory("Sample Parent Property", wxPG_LABEL));

        wxPGProperty* carProp2 = pgPage2->Append(
            new wxStringProperty(
                "Car", wxPG_LABEL, "<composed>"));

        pgPage2->AppendIn(
            carProp2,
            new wxStringProperty(
                "Model", wxPG_LABEL, "Lamborghini Diablo SV"));

        pgPage2->AppendIn(
            carProp2,
            new wxIntProperty(
                "Engine Size (cc)", wxPG_LABEL, 5707));

        wxPGProperty* speedsProp2 = pgPage2->AppendIn(
            carProp2,
            new wxStringProperty("Speeds", wxPG_LABEL,
                                 "<composed>"));

        pgPage2->AppendIn(speedsProp2,
                          new wxIntProperty("Max. Speed (mph)", wxPG_LABEL,
                                            300));
        pgPage2->AppendIn(speedsProp2,
                          new wxFloatProperty("0-100 mph (sec)", wxPG_LABEL,
                                              3.9));
        pgPage2->AppendIn(speedsProp2,
                          new wxFloatProperty("1/4 mile (sec)", wxPG_LABEL,
                                              8.6));

        pgPage2->AppendIn(carProp2,
                          new wxIntProperty("Price ($)", wxPG_LABEL,
                                            300000));

        if (obj->GetPropertyAsInteger("include_advanced")) {
            pgPage2->Append(
                new wxPropertyCategory("Advanced Properties", wxPG_LABEL));

            // wxArrayStringProperty embeds a wxArrayString.
            pgPage2->Append(
                new wxArrayStringProperty("Example of ArrayStringProperty",
                                          "ArrayStringProp"));

            // Image file property. Wildcard is auto-generated from available
            // image handlers, so it is not set this time.
            pgPage2->Append(
                new wxImageFileProperty("Example of ImageFileProperty",
                                        "ImageFileProp"));

            // Font property has sub-properties.
            pgPage2->Append(
                new wxFontProperty("Font", wxPG_LABEL));

            // Colour property with arbitrary colour.
            pgPage2->Append(
                new wxColourProperty("My Colour 1", wxPG_LABEL,
                                     wxColour(242, 109, 0)));

            // System colour property.
            pgPage2->Append(
                new wxSystemColourProperty(
                    "My SysColour 1", wxPG_LABEL,
                    wxSystemSettings::GetColour(wxSYS_COLOUR_WINDOW)));

            // System colour property with custom colour.
            pgPage2->Append(
                new wxSystemColourProperty(
                    "My SysColour 2", wxPG_LABEL, wxColour(0, 200, 160)));

            // Cursor property
            pgPage2->Append(
                new wxCursorProperty(
                    "My Cursor", wxPG_LABEL, wxCURSOR_ARROW));
        }
#endif
        return propGridMgr;
    }
#if 0
        void Cleanup( wxObject* )
        {
            // Prevent assert for missing event handler
        }
#endif
    void OnCreated(wxObject* wxobject, wxWindow* /*wxparent*/) override
    {
        wxPropertyGridManager* propGridMgr
            = wxDynamicCast(wxobject, wxPropertyGridManager);
        if (!propGridMgr)
            return;

        size_t count = GetManager()->GetChildCount(wxobject);
        for (size_t i = 0; i < count; ++i) {

            wxObject* child = GetManager()->GetChild(wxobject, i);
            IObject* childObj = GetManager()->GetIObject(child);

            if (childObj->GetClassName() != "propGridPage")
                continue;

            wxPropertyGridPage* page = propGridMgr->AddPage(
                childObj->GetPropertyAsString("label"),
                childObj->GetPropertyAsBitmap("bitmap"));

            for (size_t j = 0; j < childObj->GetChildCount(); ++j) {

                IObject* innerChildObj = childObj->GetChildPtr(j);

                if (innerChildObj->GetClassName() != "propGridItem")
                    continue;

                if (innerChildObj->GetPropertyAsString("type") == "Category") {
                    page->Append(new wxPropertyCategory(
                        innerChildObj->GetPropertyAsString("label"),
                        innerChildObj->GetPropertyAsString("label")));
                } else {
                    wxPGProperty* property = wxDynamicCast(
                        wxCreateDynamicObject(
                            "wx"
                            + (innerChildObj->GetPropertyAsString("type"))
                            + "Property"),
                        wxPGProperty);
                    if (!property)
                        continue;

                    property->SetLabel(innerChildObj->GetPropertyAsString("label"));
                    property->SetName(innerChildObj->GetPropertyAsString("label"));
                    page->Append(property);

                    if (innerChildObj->GetPropertyAsString("help")
                        != wxEmptyString) {
                        page->SetPropertyHelpString(
                            property,
                            innerChildObj->GetPropertyAsString("help"));
                    }
                }
            }
        }
        if (count)
            propGridMgr->SelectPage(0);

        propGridMgr->Update();
    }
};

class PropertyGridItemComponent : public ComponentBase {
};
class PropertyGridPageComponent : public ComponentBase {
};

class StyledTextComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxStyledTextCtrl* styledTextCtrl = new wxStyledTextCtrl(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("window_style"),
            obj->GetPropertyAsString("name"));

        // Line Numbers
        if (obj->GetPropertyAsInteger("line_numbers")) {
            styledTextCtrl->SetMarginType(0, wxSTC_MARGIN_NUMBER);
            styledTextCtrl->SetMarginWidth(
                0, styledTextCtrl->TextWidth(wxSTC_STYLE_LINENUMBER, "_99999"));
        } else {
            styledTextCtrl->SetMarginWidth(0, 0);
        }
        // markers
        styledTextCtrl->MarkerDefine(wxSTC_MARKNUM_FOLDER, wxSTC_MARK_BOXPLUS);
        styledTextCtrl->MarkerSetBackground(wxSTC_MARKNUM_FOLDER, wxColour("BLACK"));
        styledTextCtrl->MarkerSetForeground(wxSTC_MARKNUM_FOLDER, wxColour("WHITE"));
        styledTextCtrl->MarkerDefine(wxSTC_MARKNUM_FOLDEROPEN, wxSTC_MARK_BOXMINUS);
        styledTextCtrl->MarkerSetBackground(wxSTC_MARKNUM_FOLDEROPEN, wxColour("BLACK"));
        styledTextCtrl->MarkerSetForeground(wxSTC_MARKNUM_FOLDEROPEN, wxColour("WHITE"));
        styledTextCtrl->MarkerDefine(wxSTC_MARKNUM_FOLDERSUB, wxSTC_MARK_EMPTY);
        styledTextCtrl->MarkerDefine(wxSTC_MARKNUM_FOLDEREND, wxSTC_MARK_BOXPLUS);
        styledTextCtrl->MarkerSetBackground(wxSTC_MARKNUM_FOLDEREND, wxColour("BLACK"));
        styledTextCtrl->MarkerSetForeground(wxSTC_MARKNUM_FOLDEREND, wxColour("WHITE"));
        styledTextCtrl->MarkerDefine(wxSTC_MARKNUM_FOLDEROPENMID, wxSTC_MARK_BOXMINUS);
        styledTextCtrl->MarkerSetBackground(wxSTC_MARKNUM_FOLDEROPENMID, wxColour("BLACK"));
        styledTextCtrl->MarkerSetForeground(wxSTC_MARKNUM_FOLDEROPENMID, wxColour("WHITE"));
        styledTextCtrl->MarkerDefine(wxSTC_MARKNUM_FOLDERMIDTAIL, wxSTC_MARK_EMPTY);
        styledTextCtrl->MarkerDefine(wxSTC_MARKNUM_FOLDERTAIL, wxSTC_MARK_EMPTY);

        // folding
        if (obj->GetPropertyAsInteger("folding")) {
            styledTextCtrl->SetMarginType(1, wxSTC_MARGIN_SYMBOL);
            styledTextCtrl->SetMarginMask(1, wxSTC_MASK_FOLDERS);
            styledTextCtrl->SetMarginWidth(1, 16);
            styledTextCtrl->SetMarginSensitive(1, true);

            styledTextCtrl->SetProperty("fold", "1");

            styledTextCtrl->SetFoldFlags(wxSTC_FOLDFLAG_LINEBEFORE_CONTRACTED
                                         | wxSTC_FOLDFLAG_LINEAFTER_CONTRACTED);
        } else {
            styledTextCtrl->SetMarginWidth(1, 0);
        }
        styledTextCtrl->SetIndentationGuides(obj->GetPropertyAsInteger("indentation_guides"));

        styledTextCtrl->SetMarginWidth(2, 0);

        styledTextCtrl->SetLexer(wxSTC_LEX_CPP);
        styledTextCtrl->SetKeyWords(0, "asm auto bool break case catch char class const const_cast \
                           continue default delete do double dynamic_cast else enum explicit \
                           export extern false float for friend goto if inline int long \
                           mutable namespace new operator private protected public register \
                           reinterpret_cast return short signed sizeof static static_cast \
                           struct switch template this throw true try typedef typeid \
                           typename union unsigned using virtual void volatile wchar_t \
                           while");

        wxFont font(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL);
        if (!obj->GetPropertyAsString("font").empty())
            font = obj->GetPropertyAsFont("font");

        styledTextCtrl->StyleSetFont(wxSTC_STYLE_DEFAULT, font);
        styledTextCtrl->StyleClearAll();
        styledTextCtrl->StyleSetBold(wxSTC_C_WORD, true);
        styledTextCtrl->StyleSetForeground(wxSTC_C_WORD, *wxBLUE);
        styledTextCtrl->StyleSetForeground(wxSTC_C_STRING, *wxRED);
        styledTextCtrl->StyleSetForeground(wxSTC_C_STRINGEOL, *wxRED);
        styledTextCtrl->StyleSetForeground(wxSTC_C_PREPROCESSOR, wxColour(49, 106, 197));
        styledTextCtrl->StyleSetForeground(wxSTC_C_COMMENT, wxColour(0, 128, 0));
        styledTextCtrl->StyleSetForeground(wxSTC_C_COMMENTLINE, wxColour(0, 128, 0));
        styledTextCtrl->StyleSetForeground(wxSTC_C_COMMENTDOC, wxColour(0, 128, 0));
        styledTextCtrl->StyleSetForeground(wxSTC_C_COMMENTLINEDOC, wxColour(0, 128, 0));
        styledTextCtrl->StyleSetForeground(wxSTC_C_NUMBER, *wxBLUE);
        styledTextCtrl->SetUseTabs((obj->GetPropertyAsInteger("use_tabs")));
        styledTextCtrl->SetTabWidth(obj->GetPropertyAsInteger("tab_width"));
        styledTextCtrl->SetTabIndents((obj->GetPropertyAsInteger("tab_indents")));
        styledTextCtrl->SetBackSpaceUnIndents((obj->GetPropertyAsInteger("backspace_unindents")));
        styledTextCtrl->SetIndent(obj->GetPropertyAsInteger("tab_width"));
        styledTextCtrl->SetSelBackground(true, wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
        styledTextCtrl->SetSelForeground(true, wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT));
        styledTextCtrl->SetViewEOL((obj->GetPropertyAsInteger("view_eol")));
        styledTextCtrl->SetViewWhiteSpace(obj->GetPropertyAsInteger("view_whitespace"));
        styledTextCtrl->SetCaretWidth(2);
        styledTextCtrl->SetText(
            "/**\n"
            "\twxStyledTextCtrl test code\n"
            "*/\n"
            "class SampleCode\n"
            "{\n"
            "public:\n"
            "\t/** Setter\n"
            "\t\t@param data The data.\n"
            "\t*/\n"
            "\tvoid setData(int data)\n"
            "\t{\n"
            "\t\tm_data = data;\n"
            "\t}\n"
            "\t/** Getter */\n"
            "\tint getData() const\n"
            "\t{\n"
            "\t\treturn m_data;\n"
            "\t}\n"
            "private:\n"
            "\tint m_data;\n"
            "};\n");
        styledTextCtrl->PushEventHandler(
            new ComponentEvtHandler(styledTextCtrl, GetManager()));
        return styledTextCtrl;
    }

    void Cleanup(wxObject* obj) override
    {
        wxStyledTextCtrl* styledTextCtrl = wxDynamicCast(obj, wxStyledTextCtrl);
        if (styledTextCtrl)
            styledTextCtrl->PopEventHandler(true);
    }
};

void ComponentEvtHandler::OnMarginClick(wxStyledTextEvent& event)
{
    wxStyledTextCtrl* styledTextCtrl = wxDynamicCast(m_window, wxStyledTextCtrl);
    if (styledTextCtrl) {
        if (event.GetMargin() == 1) {
            int lineClick = styledTextCtrl->LineFromPosition(event.GetPosition());
            int levelClick = styledTextCtrl->GetFoldLevel(lineClick);
            if ((levelClick & wxSTC_FOLDLEVELHEADERFLAG) > 0)
                styledTextCtrl->ToggleFold(lineClick);
        }
    }
    event.Skip();
}

class DataViewModel : public wxDataViewModel {
public:
    unsigned int GetChildren(
        const wxDataViewItem&, wxDataViewItemArray& /*children*/) const override
    {
        return 0;
    }
    unsigned int GetColumnCount() const override
    {
        return 0;
    }
    wxString GetColumnType(unsigned int /*col*/) const override
    {
        return wxVariant("Dummy").GetType();
    }
    wxDataViewItem GetParent(const wxDataViewItem&) const override
    {
        return wxDataViewItem(nullptr);
    }
    bool IsContainer(const wxDataViewItem&) const override
    {
        return false;
    }
    void GetValue(wxVariant&, const wxDataViewItem&,
                  unsigned int /*col*/) const override
    {
    }
    bool SetValue(const wxVariant&, const wxDataViewItem&,
                  unsigned int /*col*/) override
    {
        return true;
    }
};

class DataViewCtrl : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxDataViewCtrl* dataViewCtrl = new wxDataViewCtrl(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("window_style"));

        wxObjectDataPtr<DataViewModel> model;
        model = new DataViewModel;
        dataViewCtrl->AssociateModel(model.get());
        return dataViewCtrl;
    }

    void OnCreated(wxObject* wxobject, wxWindow* /*wxparent*/) override
    {
        wxDataViewCtrl* list = wxDynamicCast(wxobject, wxDataViewCtrl);
        if (!list)
            return;

        size_t count = GetManager()->GetChildCount(wxobject);
        for (size_t i = 0; i < count; ++i) {

            wxObject* child = GetManager()->GetChild(wxobject, i);
            IObject* childObj = GetManager()->GetIObject(child);

            if (childObj->GetClassName() != "dataViewColumn")
                continue;

            if (childObj->GetPropertyAsString("type") == "Text") {
                auto* col = list->AppendTextColumn(
                    childObj->GetPropertyAsString("label"),
                    childObj->GetPropertyAsInteger("model_column"),
                    static_cast<wxDataViewCellMode>(
                        childObj->GetPropertyAsInteger("mode")),
                    childObj->GetPropertyAsInteger("width"),
                    static_cast<wxAlignment>(
                        childObj->GetPropertyAsInteger("align")),
                    childObj->GetPropertyAsInteger("flags"));

                if (!childObj->IsNull("ellipsize")) {
                    col->GetRenderer()->EnableEllipsize(
                        static_cast<wxEllipsizeMode>(
                            childObj->GetPropertyAsInteger("ellipsize")));
                }
            } else if (childObj->GetPropertyAsString("type") == "Toggle") {
                auto* col = list->AppendToggleColumn(
                    childObj->GetPropertyAsString("label"),
                    childObj->GetPropertyAsInteger("model_column"),
                    static_cast<wxDataViewCellMode>(
                        childObj->GetPropertyAsInteger("mode")),
                    childObj->GetPropertyAsInteger("width"),
                    static_cast<wxAlignment>(
                        childObj->GetPropertyAsInteger("align")),
                    childObj->GetPropertyAsInteger("flags"));

                if (!childObj->IsNull("ellipsize")) {
                    col->GetRenderer()->EnableEllipsize(
                        static_cast<wxEllipsizeMode>(
                            childObj->GetPropertyAsInteger("ellipsize")));
                }
            } else if (childObj->GetPropertyAsString("type") == "Progress") {
                auto* col = list->AppendProgressColumn(
                    childObj->GetPropertyAsString("label"),
                    childObj->GetPropertyAsInteger("model_column"),
                    static_cast<wxDataViewCellMode>(
                        childObj->GetPropertyAsInteger("mode")),
                    childObj->GetPropertyAsInteger("width"),
                    static_cast<wxAlignment>(
                        childObj->GetPropertyAsInteger("align")),
                    childObj->GetPropertyAsInteger("flags"));
                if (!childObj->IsNull("ellipsize")) {
                    col->GetRenderer()->EnableEllipsize(
                        static_cast<wxEllipsizeMode>(
                            childObj->GetPropertyAsInteger("ellipsize")));
                }
            } else if (childObj->GetPropertyAsString("type") == "IconText") {
                auto* col = list->AppendIconTextColumn(
                    childObj->GetPropertyAsString("label"),
                    childObj->GetPropertyAsInteger("model_column"),
                    static_cast<wxDataViewCellMode>(
                        childObj->GetPropertyAsInteger("mode")),
                    childObj->GetPropertyAsInteger("width"),
                    static_cast<wxAlignment>(childObj->GetPropertyAsInteger("align")),
                    childObj->GetPropertyAsInteger("flags"));
                if (!childObj->IsNull("ellipsize")) {
                    col->GetRenderer()->EnableEllipsize(
                        static_cast<wxEllipsizeMode>(
                            childObj->GetPropertyAsInteger("ellipsize")));
                }
            } else if (childObj->GetPropertyAsString("type") == "Date") {
                auto* col = list->AppendDateColumn(
                    childObj->GetPropertyAsString("label"),
                    childObj->GetPropertyAsInteger("model_column"),
                    static_cast<wxDataViewCellMode>(
                        childObj->GetPropertyAsInteger("mode")),
                    childObj->GetPropertyAsInteger("width"),
                    static_cast<wxAlignment>(childObj->GetPropertyAsInteger("align")),
                    childObj->GetPropertyAsInteger("flags"));
                if (!childObj->IsNull("ellipsize")) {
                    col->GetRenderer()->EnableEllipsize(
                        static_cast<wxEllipsizeMode>(
                            childObj->GetPropertyAsInteger("ellipsize")));
                }
            } else if (childObj->GetPropertyAsString("type") == "Bitmap") {
                auto* col = list->AppendBitmapColumn(
                    childObj->GetPropertyAsString("label"),
                    childObj->GetPropertyAsInteger("model_column"),
                    static_cast<wxDataViewCellMode>(
                        childObj->GetPropertyAsInteger("mode")),
                    childObj->GetPropertyAsInteger("width"),
                    static_cast<wxAlignment>(
                        childObj->GetPropertyAsInteger("align")),
                    childObj->GetPropertyAsInteger("flags"));
                if (!childObj->IsNull("ellipsize")) {
                    col->GetRenderer()->EnableEllipsize(
                        static_cast<wxEllipsizeMode>(
                            childObj->GetPropertyAsInteger("ellipsize")));
                }
            }
        }
    }
};

class DataViewTreeCtrl : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        return new wxDataViewTreeCtrl(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("window_style"));
    }
};

class DataViewListCtrl : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        return new wxDataViewListCtrl(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("window_style"));
    }

    void OnCreated(wxObject* wxobject, wxWindow* /*wxparent*/) override
    {
        wxDataViewListCtrl* list = wxDynamicCast(wxobject, wxDataViewListCtrl);
        if (!list)
            return;

        size_t count = GetManager()->GetChildCount(wxobject);
        for (size_t i = 0; i < count; ++i) {

            wxObject* child = GetManager()->GetChild(wxobject, i);
            IObject* childObj = GetManager()->GetIObject(child);

            if (childObj->GetClassName() != "dataViewListColumn")
                continue;

            if (childObj->GetPropertyAsString("type") == "Text") {
                auto* col = list->AppendTextColumn(
                    childObj->GetPropertyAsString("label"),
                    static_cast<wxDataViewCellMode>(
                        childObj->GetPropertyAsInteger("mode")),
                    childObj->GetPropertyAsInteger("width"),
                    static_cast<wxAlignment>(
                        childObj->GetPropertyAsInteger("align")),
                    childObj->GetPropertyAsInteger("flags"));
                if (!childObj->IsNull("ellipsize")) {
                    col->GetRenderer()->EnableEllipsize(
                        static_cast<wxEllipsizeMode>(
                            childObj->GetPropertyAsInteger("ellipsize")));
                }
            } else if (childObj->GetPropertyAsString("type") == "Toggle") {
                auto* col = list->AppendToggleColumn(
                    childObj->GetPropertyAsString("label"),
                    static_cast<wxDataViewCellMode>(
                        childObj->GetPropertyAsInteger("mode")),
                    childObj->GetPropertyAsInteger("width"),
                    static_cast<wxAlignment>(
                        childObj->GetPropertyAsInteger("align")),
                    childObj->GetPropertyAsInteger("flags"));
                if (!childObj->IsNull("ellipsize")) {
                    col->GetRenderer()->EnableEllipsize(
                        static_cast<wxEllipsizeMode>(
                            childObj->GetPropertyAsInteger("ellipsize")));
                }
            } else if (childObj->GetPropertyAsString("type") == "Progress") {
                auto* col = list->AppendProgressColumn(
                    childObj->GetPropertyAsString("label"),
                    static_cast<wxDataViewCellMode>(
                        childObj->GetPropertyAsInteger("mode")),
                    childObj->GetPropertyAsInteger("width"),
                    static_cast<wxAlignment>(
                        childObj->GetPropertyAsInteger("align")),
                    childObj->GetPropertyAsInteger("flags"));
                if (!childObj->IsNull("ellipsize")) {
                    col->GetRenderer()->EnableEllipsize(
                        static_cast<wxEllipsizeMode>(
                            childObj->GetPropertyAsInteger("ellipsize")));
                }
            } else if (childObj->GetPropertyAsString("type") == "IconText") {
                auto* col = list->AppendIconTextColumn(
                    childObj->GetPropertyAsString("label"),
                    static_cast<wxDataViewCellMode>(
                        childObj->GetPropertyAsInteger("mode")),
                    childObj->GetPropertyAsInteger("width"),
                    static_cast<wxAlignment>(
                        childObj->GetPropertyAsInteger("align")),
                    childObj->GetPropertyAsInteger("flags"));
                if (!childObj->IsNull("ellipsize")) {
                    col->GetRenderer()->EnableEllipsize(
                        static_cast<wxEllipsizeMode>(
                            childObj->GetPropertyAsInteger("ellipsize")));
                }
            }
        }
    }
};

class DataViewListColumn : public ComponentBase {
};
class DataViewColumn : public ComponentBase {
};

class TreeListCtrlComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        return new wxTreeListCtrl(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));
    }

    void OnCreated(wxObject* wxobject, wxWindow* /*wxparent*/) override
    {
        wxTreeListCtrl* treeListCtrl = wxDynamicCast(wxobject, wxTreeListCtrl);
        if (!treeListCtrl)
            return;

        int colCount = treeListCtrl->GetColumnCount();

        if (!colCount)
            return;

        wxTreeListItem root = treeListCtrl->GetRootItem();
        wxTreeListItem treeListParent;
        wxTreeListItem treeListItem;
        int n = 0;

        treeListItem = treeListCtrl->AppendItem(
            root,
            wxString::Format("Item #%d", ++n));

        FillItem(treeListCtrl, treeListItem, colCount, n);

        treeListParent = treeListItem;
        for (int i = 0; i < 5; ++i) {
            treeListItem = treeListCtrl->AppendItem(
                treeListParent, wxString::Format("Item #%d", ++n));

            FillItem(treeListCtrl, treeListItem, colCount, n);
        }
        treeListCtrl->Expand(treeListParent);

        treeListParent = treeListItem;
        for (int i = 0; i < 5; ++i) {
            treeListItem = treeListCtrl->AppendItem(
                treeListParent, wxString::Format("Item #%d", ++n));

            FillItem(treeListCtrl, treeListItem, colCount, n);
        }
        treeListCtrl->Expand(treeListParent);
    }

    void FillItem(wxTreeListCtrl* treeListCtrl, wxTreeListItem itemId, int colCount, int row)
    {
        for (int i = 0; i < colCount; ++i) {
            treeListCtrl->SetItemText(
                itemId, i, wxString::Format("Item #%d, column #%d", row, i));
        }
    }
};

class TreeListCtrlColumnComponent : public ComponentBase {
public:
    void OnCreated(wxObject* wxobject, wxWindow* wxparent) override
    {
        IObject* obj = GetManager()->GetIObject(wxobject);
        wxTreeListCtrl* treeList = wxDynamicCast(wxparent, wxTreeListCtrl);

        if (!(obj && treeList)) {
            wxLogError("TreeListCtrlColumnComponent is missing"
                       "its wxWeaver object(%i) or its parent(%i)",
                       obj, treeList);
            return;
        }
        treeList->AppendColumn(obj->GetPropertyAsString("name"),
                               obj->GetPropertyAsInteger("width"),
                               static_cast<wxAlignment>(
                                   obj->GetPropertyAsInteger("alignment")),
                               obj->GetPropertyAsInteger("flag"));
    }
    void OnSelected(wxObject*) override { }
};

class RibbonBarComponent : public ComponentBase {
    // TODO: no public?
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxRibbonBar* ribbonBar = new wxRibbonBar(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        if (obj->GetPropertyAsString("theme") == "Default")
            ribbonBar->SetArtProvider(new wxRibbonDefaultArtProvider);
        else if (obj->GetPropertyAsString("theme") == "Generic")
            ribbonBar->SetArtProvider(new wxRibbonAUIArtProvider);
        else if (obj->GetPropertyAsString("theme") == "MSW")
            ribbonBar->SetArtProvider(new wxRibbonMSWArtProvider);

        ribbonBar->PushEventHandler(new ComponentEvtHandler(ribbonBar, GetManager()));
        return ribbonBar;
    }

    void Cleanup(wxObject* obj) override
    {
        wxRibbonBar* ribbonBar = wxDynamicCast(obj, wxRibbonBar);
        if (ribbonBar)
            ribbonBar->PopEventHandler(true);
    }

    void OnCreated(wxObject* wxobject, wxWindow* /*wxparent*/) override
    {
        wxRibbonBar* ribbonBar = wxDynamicCast(wxobject, wxRibbonBar);
        if (!ribbonBar)
            ribbonBar->Realize();
    }
};

void ComponentEvtHandler::OnRibbonBarPageChanged(wxRibbonBarEvent& event)
{
    if (m_window != event.GetEventObject())
        return;

    wxRibbonBar* ribbonBar = wxDynamicCast(event.GetEventObject(), wxRibbonBar);
    if (!ribbonBar)
        return;

    int selPage = ribbonBar->GetActivePage();

    size_t count = m_manager->GetChildCount(m_window);
    for (size_t i = 0; i < count; i++) {

        wxObject* wxChild = m_manager->GetChild(m_window, i);
        IObject* iChild = m_manager->GetIObject(wxChild);

        if (!iChild)
            return;

        if (int(i) == selPage && !iChild->GetPropertyAsInteger("select")) {
            m_manager->ModifyProperty(wxChild, "select", "1", false);
        } else if (int(i) != selPage && iChild->GetPropertyAsInteger("select")) {
            m_manager->ModifyProperty(wxChild, "select", "0", false);
        }
    }
    // Select the corresponding ribbon page in the object tree
    if (ribbonBar)
        m_manager->SelectObject(ribbonBar->GetPage(selPage));
}

class RibbonPageComponent : public ComponentBase {

    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxRibbonPage* rbpage = new wxRibbonPage(
            (wxRibbonBar*)parent, wxID_ANY,
            obj->GetPropertyAsString("label"),
            obj->GetPropertyAsBitmap("bitmap"), 0);

        if (obj->GetPropertyAsInteger("select"))
            ((wxRibbonBar*)parent)->SetActivePage(rbpage);
#if 0
        rbpage->PushEventHandler(new ComponentEvtHandler(rbpage, GetManager()));
#endif
        return rbpage;
    }
#if 0
        void Cleanup(wxObject* obj) override
        {
            wxRibbonPage* ribbonPage = wxDynamicCast(obj, wxRibbonPage);
            if (ribbonPage)
                ribbonPage->PopEventHandler(true);
        }
#endif
};

class RibbonPanelComponent : public ComponentBase {

    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxRibbonPanel* ribbonPanel = new wxRibbonPanel(
            (wxRibbonPage*)parent, wxID_ANY,
            obj->GetPropertyAsString("label"),
            obj->GetPropertyAsBitmap("bitmap"),
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));
#if 0
        ribbonPanel->PushEventHandler(new ComponentEvtHandler(ribbonPanel, GetManager()));
#endif
        return ribbonPanel;
    }
#if 0
        void Cleanup(wxObject* obj) override
        {
            wxRibbonPanel* ribbonPanel = wxDynamicCast(obj, wxRibbonPanel);
            if (ribbonPanel)
                    ribbonPanel->PopEventHandler(true);
        }
#endif
};

class RibbonButtonBarComponent : public ComponentBase {

    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxRibbonButtonBar* ribbonBtnBar = new wxRibbonButtonBar(
            (wxRibbonPanel*)parent, wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"), 0);
#if 0
        ribbonBtnBar->PushEventHandler(new ComponentEvtHandler(ribbonBtnBar, GetManager()));
#endif
        return ribbonBtnBar;
    }
#if 0
        void Cleanup(wxObject* obj) override
        {
            wxRibbonButtonBar* ribbonBtnBar = wxDynamicCast(obj, wxRibbonButtonBar);
            if (ribbonBtnBar)
                ribbonBtnBar->PopEventHandler(true);
        }
#endif

    void OnCreated(wxObject* wxobject, wxWindow* /*wxparent*/) override
    {
        wxRibbonButtonBar* ribbonBtnBar = wxDynamicCast(wxobject, wxRibbonButtonBar);
        if (!ribbonBtnBar)
            return;

        size_t count = GetManager()->GetChildCount(wxobject);

        for (size_t i = 0; i < count; ++i) {

            wxObject* child = GetManager()->GetChild(wxobject, i);
            IObject* childObj = GetManager()->GetIObject(child);

            if (childObj->GetClassName() == "ribbonButton") {
                ribbonBtnBar->AddButton(
                    wxID_ANY,
                    childObj->GetPropertyAsString("label"),
                    childObj->GetPropertyAsBitmap("bitmap"),
                    childObj->GetPropertyAsString("help"));
            } else if (childObj->GetClassName() == "ribbonDropdownButton") {
                ribbonBtnBar->AddDropdownButton(
                    wxID_ANY,
                    childObj->GetPropertyAsString("label"),
                    childObj->GetPropertyAsBitmap("bitmap"),
                    childObj->GetPropertyAsString("help"));
            } else if (childObj->GetClassName() == "ribbonHybridButton") {
                ribbonBtnBar->AddHybridButton(
                    wxID_ANY,
                    childObj->GetPropertyAsString("label"),
                    childObj->GetPropertyAsBitmap("bitmap"),
                    childObj->GetPropertyAsString("help"));
            } else if (childObj->GetClassName() == "ribbonToggleButton") {
                ribbonBtnBar->AddToggleButton(
                    wxID_ANY,
                    childObj->GetPropertyAsString("label"),
                    childObj->GetPropertyAsBitmap("bitmap"),
                    childObj->GetPropertyAsString("help"));
            }
        }
    }
};

class RibbonButtonComponent : public ComponentBase {
};
class RibbonDropdownButtonComponent : public ComponentBase {
};
class RibbonHybridButtonComponent : public ComponentBase {
};
class RibbonToggleButtonComponent : public ComponentBase {
};

class RibbonToolBarComponent : public ComponentBase {

    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxRibbonToolBar* ribbonToolBar = new wxRibbonToolBar(
            (wxRibbonPanel*)parent, wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"), 0);
#if 0
        ribbonToolBar->PushEventHandler(new ComponentEvtHandler(ribbonToolBar, GetManager()));
#endif
        return ribbonToolBar;
    }
#if 0
        void Cleanup(wxObject* obj) override
        {
            wxRibbonToolBar* ribbonToolBar = wxDynamicCast(obj, wxRibbonToolBar);
            if (ribbonToolBar)
                ribbonToolBar->PopEventHandler(true);
        }
#endif
    void OnCreated(wxObject* wxobject, wxWindow* /*wxparent*/) override
    {
        wxRibbonToolBar* ribbonToolBar = wxDynamicCast(wxobject, wxRibbonToolBar);
        if (!ribbonToolBar)
            return;

        size_t count = GetManager()->GetChildCount(wxobject);

        for (size_t i = 0; i < count; ++i) {

            wxObject* child = GetManager()->GetChild(wxobject, i);
            IObject* childObj = GetManager()->GetIObject(child);

            if ("ribbonTool" == childObj->GetClassName()) {
                ribbonToolBar->AddTool(
                    wxID_ANY,
                    childObj->GetPropertyAsBitmap("bitmap"),
                    childObj->GetPropertyAsString("help"));
            } else if ("ribbonDropdownTool" == childObj->GetClassName()) {
                ribbonToolBar->AddDropdownTool(
                    wxID_ANY,
                    childObj->GetPropertyAsBitmap("bitmap"),
                    childObj->GetPropertyAsString("help"));
            } else if ("ribbonHybridTool" == childObj->GetClassName()) {
                ribbonToolBar->AddHybridTool(
                    wxID_ANY,
                    childObj->GetPropertyAsBitmap("bitmap"),
                    childObj->GetPropertyAsString("help"));
            } else if ("ribbonToggleTool" == childObj->GetClassName()) {
                ribbonToolBar->AddToggleTool(
                    wxID_ANY,
                    childObj->GetPropertyAsBitmap("bitmap"),
                    childObj->GetPropertyAsString("help"));
            }
        }
    }
};

class RibbonToolComponent : public ComponentBase {
};
class RibbonDropdownToolComponent : public ComponentBase {
};
class RibbonHybridToolComponent : public ComponentBase {
};
class RibbonToggleToolComponent : public ComponentBase {
};

class RibbonGalleryComponent : public ComponentBase {

    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxRibbonGallery* ribbonGallery = new wxRibbonGallery(
            (wxRibbonPanel*)parent, wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"), 0);
#if 0
        ribbonGallery->PushEventHandler(
            new ComponentEvtHandler(ribbonGallery, GetManager()));
#endif
        return ribbonGallery;
    }
#if 0
        void Cleanup(wxObject* obj) override
        {
            wxRibbonGallery* ribbonGallery = wxDynamicCast(obj, wxRibbonGallery);
            if (ribbonGallery)
                ribbonGallery->PopEventHandler(true);
        }
#endif
    void OnCreated(wxObject* wxobject, wxWindow* /*wxparent*/) override
    {
        wxRibbonGallery* ribbonGallery = wxDynamicCast(wxobject, wxRibbonGallery);
        if (!ribbonGallery)
            return;

        size_t count = GetManager()->GetChildCount(wxobject);

        for (size_t i = 0; i < count; ++i) {

            wxObject* child = GetManager()->GetChild(wxobject, i);
            IObject* childObj = GetManager()->GetIObject(child);

            if ("ribbonGalleryItem" == childObj->GetClassName()) {
                ribbonGallery->Append(
                    childObj->GetPropertyAsBitmap("bitmap"), wxID_ANY);
            }
        }
    }
};

class RibbonGalleryItemComponent : public ComponentBase {
};

BEGIN_LIBRARY()

WINDOW_COMPONENT("wxCalendarCtrl", CalendarCtrlComponent)
WINDOW_COMPONENT("wxDatePickerCtrl", DatePickerCtrlComponent)
WINDOW_COMPONENT("wxTimePickerCtrl", TimePickerCtrlComponent)
WINDOW_COMPONENT("wxHtmlWindow", HtmlWindowComponent)
WINDOW_COMPONENT("wxToggleButton", ToggleButtonComponent)
WINDOW_COMPONENT("wxBitmapToggleButton", BitmapToggleButtonComponent)
WINDOW_COMPONENT("wxTreeCtrl", TreeCtrlComponent)
WINDOW_COMPONENT("wxGrid", GridComponent)
WINDOW_COMPONENT("wxScrollBar", ScrollBarComponent)
WINDOW_COMPONENT("wxSpinCtrl", SpinCtrlComponent)
WINDOW_COMPONENT("wxSpinButton", SpinButtonComponent)
WINDOW_COMPONENT("CustomControl", CustomControlComponent)
WINDOW_COMPONENT("wxDataViewCtrl", DataViewCtrl)
WINDOW_COMPONENT("wxDataViewTreeCtrl", DataViewTreeCtrl)
WINDOW_COMPONENT("wxDataViewListCtrl", DataViewListCtrl)
ABSTRACT_COMPONENT("dataViewListColumn", DataViewListColumn)
ABSTRACT_COMPONENT("dataViewColumn", DataViewColumn)
WINDOW_COMPONENT("wxRibbonBar", RibbonBarComponent)
WINDOW_COMPONENT("wxRibbonPage", RibbonPageComponent)
WINDOW_COMPONENT("wxRibbonPanel", RibbonPanelComponent)
WINDOW_COMPONENT("wxRibbonButtonBar", RibbonButtonBarComponent)
WINDOW_COMPONENT("wxRibbonToolBar", RibbonToolBarComponent)
WINDOW_COMPONENT("wxRibbonGallery", RibbonGalleryComponent)
ABSTRACT_COMPONENT("ribbonButton", RibbonButtonComponent)
ABSTRACT_COMPONENT("ribbonDropdownButton", RibbonDropdownButtonComponent)
ABSTRACT_COMPONENT("ribbonHybridButton", RibbonHybridButtonComponent)
ABSTRACT_COMPONENT("ribbonToggleButton", RibbonToggleButtonComponent)
ABSTRACT_COMPONENT("ribbonTool", RibbonToolComponent)
ABSTRACT_COMPONENT("ribbonDropdownTool", RibbonDropdownToolComponent)
ABSTRACT_COMPONENT("ribbonHybridTool", RibbonHybridToolComponent)
ABSTRACT_COMPONENT("ribbonToggleTool", RibbonToggleToolComponent)
ABSTRACT_COMPONENT("ribbonGalleryItem", RibbonGalleryItemComponent)

// wxCheckListBox
WINDOW_COMPONENT("wxCheckListBox", CheckListBoxComponent)

#ifdef USE_MEDIACTRL
WINDOW_COMPONENT("wxMediaCtrl", MediaCtrlComponent)
#endif

// wxRichTextCtrl
WINDOW_COMPONENT("wxRichTextCtrl", RichTextCtrlComponent)
MACRO(wxTE_PROCESS_ENTER);
MACRO(wxTE_PROCESS_TAB);
MACRO(wxTE_READONLY);
MACRO(wxTE_AUTO_URL);

// wxColourPickerCtrl
WINDOW_COMPONENT("wxColourPickerCtrl", ColourPickerComponent)
MACRO(wxCLRP_DEFAULT_STYLE)
MACRO(wxCLRP_USE_TEXTCTRL)
MACRO(wxCLRP_SHOW_LABEL)

// wxFontPickerCtrl
WINDOW_COMPONENT("wxFontPickerCtrl", FontPickerComponent)
MACRO(wxFNTP_DEFAULT_STYLE)
MACRO(wxFNTP_USE_TEXTCTRL)
MACRO(wxFNTP_FONTDESC_AS_LABEL)
MACRO(wxFNTP_USEFONT_FOR_LABEL)

// wxFilePickerCtrl
WINDOW_COMPONENT("wxFilePickerCtrl", FilePickerComponent)
MACRO(wxFLP_DEFAULT_STYLE)
MACRO(wxFLP_USE_TEXTCTRL)
MACRO(wxFLP_OPEN)
MACRO(wxFLP_SAVE)
MACRO(wxFLP_OVERWRITE_PROMPT)
MACRO(wxFLP_FILE_MUST_EXIST)
MACRO(wxFLP_CHANGE_DIR)
MACRO(wxFLP_SMALL)

// wxDirPickerCtrl
WINDOW_COMPONENT("wxDirPickerCtrl", DirPickerComponent)
MACRO(wxDIRP_DEFAULT_STYLE)
MACRO(wxDIRP_USE_TEXTCTRL)
MACRO(wxDIRP_DIR_MUST_EXIST)
MACRO(wxDIRP_CHANGE_DIR)
MACRO(wxDIRP_SMALL)

// wxHyperlinkCtrl
WINDOW_COMPONENT("wxHyperlinkCtrl", HyperlinkComponent)
MACRO(wxHL_ALIGN_LEFT)
MACRO(wxHL_ALIGN_RIGHT)
MACRO(wxHL_ALIGN_CENTRE)
MACRO(wxHL_CONTEXTMENU)
MACRO(wxHL_DEFAULT_STYLE)

// wxSearchCtrl
WINDOW_COMPONENT("wxSearchCtrl", SearchCtrlComponent)
MACRO(wxTE_PROCESS_ENTER);
MACRO(wxTE_PROCESS_TAB);
MACRO(wxTE_NOHIDESEL);
MACRO(wxTE_LEFT);
MACRO(wxTE_CENTER);
MACRO(wxTE_RIGHT);
MACRO(wxTE_CAPITALIZE);

WINDOW_COMPONENT("wxSpinCtrlDouble", SpinCtrlDoubleComponent)

// wxCalendarCtrl
MACRO(wxCAL_SUNDAY_FIRST)
MACRO(wxCAL_MONDAY_FIRST)
MACRO(wxCAL_SHOW_HOLIDAYS)
MACRO(wxCAL_NO_YEAR_CHANGE)
MACRO(wxCAL_NO_MONTH_CHANGE)
MACRO(wxCAL_SHOW_SURROUNDING_WEEKS)
MACRO(wxCAL_SEQUENTIAL_MONTH_SELECTION)
MACRO(wxCAL_SHOW_WEEK_NUMBERS)

// wxDatePickerCtrl
MACRO(wxDP_SPIN)
MACRO(wxDP_DROPDOWN)
MACRO(wxDP_SHOWCENTURY)
MACRO(wxDP_ALLOWNONE)
MACRO(wxDP_DEFAULT)

// wxTimePickerCtrl
MACRO(wxTP_DEFAULT)

// wxHtmlWindow
MACRO(wxHW_SCROLLBAR_NEVER)
MACRO(wxHW_SCROLLBAR_AUTO)
MACRO(wxHW_NO_SELECTION)

// wxTreeCtrl
MACRO(wxTR_EDIT_LABELS)
MACRO(wxTR_NO_BUTTONS)
MACRO(wxTR_HAS_BUTTONS)
MACRO(wxTR_TWIST_BUTTONS)
MACRO(wxTR_NO_LINES)
MACRO(wxTR_FULL_ROW_HIGHLIGHT)
MACRO(wxTR_LINES_AT_ROOT)
MACRO(wxTR_HIDE_ROOT)
MACRO(wxTR_ROW_LINES)
MACRO(wxTR_HAS_VARIABLE_ROW_HEIGHT)
MACRO(wxTR_SINGLE)
MACRO(wxTR_MULTIPLE)
MACRO(wxTR_DEFAULT_STYLE)

// wxGrid
MACRO(wxALIGN_LEFT)
MACRO(wxALIGN_CENTER)
MACRO(wxALIGN_RIGHT)
MACRO(wxALIGN_TOP)
MACRO(wxALIGN_BOTTOM)
MACRO(wxGRID_AUTOSIZE)

// wxScrollBar
MACRO(wxSB_HORIZONTAL)
MACRO(wxSB_VERTICAL)

// wxSpinCtrl and wxSpinButton
MACRO(wxSP_ARROW_KEYS)
MACRO(wxSP_WRAP)
MACRO(wxSP_HORIZONTAL)
MACRO(wxSP_VERTICAL)

// wxGenericDirCtrl
WINDOW_COMPONENT("wxGenericDirCtrl", GenericDirCtrlComponent)
MACRO(wxDIRCTRL_DIR_ONLY)
MACRO(wxDIRCTRL_3D_INTERNAL)
MACRO(wxDIRCTRL_SELECT_FIRST)
MACRO(wxDIRCTRL_EDIT_LABELS)
MACRO(wxDIRCTRL_MULTIPLE)

// wxTimer
ABSTRACT_COMPONENT("wxTimer", TimerComponent)

// wxPropertyGrid
WINDOW_COMPONENT("wxPropertyGrid", PropertyGridComponent)
ABSTRACT_COMPONENT("propGridItem", PropertyGridItemComponent)
MACRO(wxPG_DEFAULT_STYLE)
MACRO(wxPG_AUTO_SORT)
MACRO(wxPG_HIDE_CATEGORIES)
MACRO(wxPG_ALPHABETIC_MODE)
MACRO(wxPG_BOLD_MODIFIED)
MACRO(wxPG_SPLITTER_AUTO_CENTER)
MACRO(wxPG_TOOLTIPS)
MACRO(wxPG_HIDE_MARGIN)
MACRO(wxPG_STATIC_SPLITTER)
MACRO(wxPG_STATIC_LAYOUT)
MACRO(wxPG_LIMITED_EDITING)
MACRO(wxPG_EX_INIT_NOCAT)
MACRO(wxPG_EX_HELP_AS_TOOLTIPS)
MACRO(wxPG_EX_NATIVE_DOUBLE_BUFFERING)
MACRO(wxPG_EX_AUTO_UNSPECIFIED_VALUES)
MACRO(wxPG_EX_WRITEONLY_BUILTIN_ATTRIBUTES)
MACRO(wxPG_EX_MULTIPLE_SELECTION)
MACRO(wxPG_EX_ENABLE_TLP_TRACKING)

// wxPropertyGridManager
WINDOW_COMPONENT("wxPropertyGridManager", PropertyGridManagerComponent)
ABSTRACT_COMPONENT("propGridPage", PropertyGridPageComponent)
MACRO(wxPG_EX_NO_FLAT_TOOLBAR)
MACRO(wxPG_EX_MODE_BUTTONS)
MACRO(wxPG_EX_HIDE_PAGE_BUTTONS)
MACRO(wxPG_EX_NO_TOOLBAR_DIVIDER)
MACRO(wxPG_EX_TOOLBAR_SEPARATOR)
MACRO(wxPGMAN_DEFAULT_STYLE)
MACRO(wxPG_DESCRIPTION)
MACRO(wxPG_TOOLBAR)
MACRO(wxPG_NO_INTERNAL_BORDER)

// wxStyledTextCtrl
WINDOW_COMPONENT("wxStyledTextCtrl", StyledTextComponent)

// wxDataViewCtrl
MACRO(wxDV_SINGLE)
MACRO(wxDV_MULTIPLE)
MACRO(wxDV_ROW_LINES)
MACRO(wxDV_HORIZ_RULES)
MACRO(wxDV_VERT_RULES)
MACRO(wxDV_VARIABLE_LINE_HEIGHT)
MACRO(wxDV_NO_HEADER)

MACRO(wxDATAVIEW_CELL_INERT)
MACRO(wxDATAVIEW_CELL_ACTIVATABLE)
MACRO(wxDATAVIEW_CELL_EDITABLE)

MACRO(wxDATAVIEW_COL_RESIZABLE)
MACRO(wxDATAVIEW_COL_SORTABLE)
MACRO(wxDATAVIEW_COL_REORDERABLE)
MACRO(wxDATAVIEW_COL_HIDDEN)

MACRO(wxELLIPSIZE_NONE)
MACRO(wxELLIPSIZE_START)
MACRO(wxELLIPSIZE_MIDDLE)
MACRO(wxELLIPSIZE_END)

MACRO(wxALIGN_LEFT)
MACRO(wxALIGN_TOP)
MACRO(wxALIGN_RIGHT)
MACRO(wxALIGN_BOTTOM)
MACRO(wxALIGN_CENTER)
MACRO(wxALIGN_CENTER_HORIZONTAL)
MACRO(wxALIGN_CENTER_VERTICAL)

// wxRibbonBar
MACRO(wxRIBBON_BAR_DEFAULT_STYLE)
MACRO(wxRIBBON_BAR_FOLDBAR_STYLE)
MACRO(wxRIBBON_BAR_SHOW_PAGE_LABELS)
MACRO(wxRIBBON_BAR_SHOW_PAGE_ICONS)
MACRO(wxRIBBON_BAR_FLOW_HORIZONTAL)
MACRO(wxRIBBON_BAR_FLOW_VERTICAL)
MACRO(wxRIBBON_BAR_SHOW_PANEL_EXT_BUTTONS)
MACRO(wxRIBBON_BAR_SHOW_PANEL_MINIMISE_BUTTONS)
MACRO(wxRIBBON_BAR_SHOW_TOGGLE_BUTTON)
MACRO(wxRIBBON_BAR_SHOW_HELP_BUTTON)

// wxRibbonPanel
MACRO(wxRIBBON_PANEL_DEFAULT_STYLE)
MACRO(wxRIBBON_PANEL_NO_AUTO_MINIMISE)
MACRO(wxRIBBON_PANEL_EXT_BUTTON)
MACRO(wxRIBBON_PANEL_MINIMISE_BUTTON)
MACRO(wxRIBBON_PANEL_STRETCH)
MACRO(wxRIBBON_PANEL_FLEXIBLE)

// wxTreeListCtrl
WINDOW_COMPONENT("wxTreeListCtrl", TreeListCtrlComponent)
MACRO(wxTL_SINGLE)
MACRO(wxTL_MULTIPLE)
MACRO(wxTL_CHECKBOX)
MACRO(wxTL_3STATE)
MACRO(wxTL_USER_3STATE)
MACRO(wxTR_DEFAULT_STYLE)

ABSTRACT_COMPONENT("wxTreeListCtrlColumn", TreeListCtrlColumnComponent)
MACRO(wxCOL_RESIZABLE)
MACRO(wxCOL_SORTABLE)
MACRO(wxCOL_REORDERABLE)
MACRO(wxCOL_HIDDEN)

END_LIBRARY()
