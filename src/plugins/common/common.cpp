/*
    wxWeaver - A GUI Designer Editor for wxWidgets.
    Copyright (C) 2005 Jos√© Antonio Hurtado
    Copyright (C) 2005 Juan Antonio Ortega (as wxFormBuilder)
    Copyright (C) 2021 Andrea Zanellato <redtid3@gmail.com>

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/
#include "imagelist.h"

#include <plugin.h>
#include <ticpp.h>
#include <xrcconv.h>

#include <wx/animate.h>
#include <wx/aui/auibar.h>
#include <wx/aui/auibook.h>
#include <wx/bmpcbox.h>
#include <wx/bookctrl.h>
#include <wx/imaglist.h>
#include <wx/infobar.h>
#include <wx/listctrl.h>
#include <wx/statline.h>

#include <unordered_map>

// Custom status bar class for windows to prevent the status bar gripper from
// moving the entire wxWeaver window
#if defined(__WIN32__) && wxUSE_NATIVE_STATUSBAR
class wxIndependentStatusBar : public wxStatusBar {
public:
    wxIndependentStatusBar(wxWindow* parent, wxWindowID id = wxID_ANY,
                           long style = wxSTB_SIZEGRIP,
                           const wxString& name = wxStatusBarNameStr)
        : wxStatusBar(parent, id, style, name)
    {
    }

    // override this virtual function to prevent the status bar from moving the main frame
    virtual WXLRESULT MSWWindowProc(WXUINT nMsg, WXWPARAM wParam, WXLPARAM lParam)
    {
        return wxStatusBarBase::MSWWindowProc(nMsg, wParam, lParam);
    }
};
#else
typedef wxStatusBar wxIndependentStatusBar;
#endif

#if 0
BEGIN_EVENT_TABLE(wxLeftDownRedirect, wxEvtHandler)
EVT_LEFT_DOWN(wxLeftDownRedirect::OnLeftDown)
END_EVENT_TABLE()
#endif

class wxLeftDownRedirect : public wxEvtHandler {
public:
    wxLeftDownRedirect(wxWindow* win, IManager* manager)
        : m_window(win)
        , m_manager(manager)
    {
        Bind(wxEVT_LEFT_DOWN, &wxLeftDownRedirect::OnLeftDown, this);
    }

private:
    void OnLeftDown(wxMouseEvent&)
    {
        m_manager->SelectObject(m_window);
    }

    wxWindow* m_window;
    IManager* m_manager;
};

#if 0
BEGIN_EVENT_TABLE(AuiToolBar, wxAuiToolBar)
EVT_AUITOOLBAR_TOOL_DROPDOWN(wxID_ANY, AuiToolBar::OnDropDownMenu)
EVT_TOOL(wxID_ANY, AuiToolBar::OnTool)
END_EVENT_TABLE()
#endif

// Custom Aui toolbar
class AuiToolBar : public wxAuiToolBar {
public:
    AuiToolBar(wxWindow* win, IManager* manager, wxWindowID id,
               wxPoint pos, wxSize size, long style)
        : wxAuiToolBar(win, id, pos, size, style)
        , m_manager(manager)
    {
        Bind(wxEVT_AUITOOLBAR_TOOL_DROPDOWN, &AuiToolBar::OnDropDownMenu, this);
        Bind(wxEVT_TOOL, &AuiToolBar::OnTool, this);
    }

    void SetObject(int index, wxObject* pObject)
    {
        m_aObjects[index] = pObject;
    }
    wxObject* GetObject(int index)
    {
        return m_aObjects[index];
    }

protected:
    IManager* m_manager;

    wxMenu* GetMenuFromObject(IObject* menu);

    void OnDropDownMenu(wxAuiToolBarEvent& event);
    void OnTool(wxCommandEvent& event);

private:
    friend class AuiToolBarComponent;

    std::unordered_map<int, wxObject*> m_aObjects;
};

#if 0
BEGIN_EVENT_TABLE(ComponentEvtHandler, wxEvtHandler)
EVT_TEXT(wxID_ANY, ComponentEvtHandler::OnText)
EVT_CHECKBOX(wxID_ANY, ComponentEvtHandler::OnChecked)
EVT_CHOICE(wxID_ANY, ComponentEvtHandler::OnChoice)
EVT_COMBOBOX(wxID_ANY, ComponentEvtHandler::OnComboBox)

// Tools do not get click events, so this will help select them
EVT_TOOL(wxID_ANY, ComponentEvtHandler::OnTool)

// wxInfoBar related handlers
EVT_BUTTON(wxID_ANY, ComponentEvtHandler::OnButton)
EVT_TIMER(wxID_ANY, ComponentEvtHandler::OnTimer)
END_EVENT_TABLE()
#endif

/** Event handler for events generated by controls in this plugin
*/
class ComponentEvtHandler : public wxEvtHandler {
    friend class AuiToolBarComponent;

public:
    ComponentEvtHandler(wxWindow* win, IManager* manager)
        : m_window(win)
        , m_manager(manager)
    {
        Bind(wxEVT_TEXT, &ComponentEvtHandler::OnText, this);
        Bind(wxEVT_CHECKBOX, &ComponentEvtHandler::OnChecked, this);
        Bind(wxEVT_CHOICE, &ComponentEvtHandler::OnChoice, this);
        Bind(wxEVT_COMBOBOX, &ComponentEvtHandler::OnComboBox, this);

        // Tools do not get click events, so this will help select them
        Bind(wxEVT_TOOL, &ComponentEvtHandler::OnTool, this);

        // wxInfoBar related handlers
        Bind(wxEVT_BUTTON, &ComponentEvtHandler::OnButton, this);
        Bind(wxEVT_TIMER, &ComponentEvtHandler::OnTimer, this);
    }

protected:
    void OnText(wxCommandEvent& event);
    void OnChecked(wxCommandEvent& event);
    void OnChoice(wxCommandEvent& event);
    void OnComboBox(wxCommandEvent& event);
    void OnTool(wxCommandEvent& event);
    void OnButton(wxCommandEvent& event);
    void OnTimer(wxTimerEvent& event);

private:
    wxWindow* m_window;
    IManager* m_manager;
    wxTimer m_timer;
};

class ButtonComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxString label = obj->GetPropertyAsString("label");
        wxButton* button = new wxButton(
            (wxWindow*)parent, wxID_ANY,
            label,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        if (obj->GetPropertyAsInteger("markup"))
            button->SetLabelMarkup(label);

        if (obj->GetPropertyAsInteger("default"))
            button->SetDefault();

        if (obj->GetPropertyAsInteger("auth_needed"))
            button->SetAuthNeeded();

        if (!obj->IsNull("bitmap"))
            button->SetBitmap(obj->GetPropertyAsBitmap("bitmap"));

        if (!obj->IsNull("disabled"))
            button->SetBitmapDisabled(obj->GetPropertyAsBitmap("disabled"));

        if (!obj->IsNull("pressed"))
            button->SetBitmapPressed(obj->GetPropertyAsBitmap("pressed"));

        if (!obj->IsNull("focus"))
            button->SetBitmapFocus(obj->GetPropertyAsBitmap("focus"));

        if (!obj->IsNull("current"))
            button->SetBitmapCurrent(obj->GetPropertyAsBitmap("current"));

        if (!obj->IsNull("position"))
            button->SetBitmapPosition(
                static_cast<wxDirection>(obj->GetPropertyAsInteger("position")));

        if (!obj->IsNull("margins"))
            button->SetBitmapMargins(obj->GetPropertyAsSize("margins"));

        return button;
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxButton",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("label", "label", XRC_TYPE_TEXT);
        xrc.AddProperty("default", "default", XRC_TYPE_BOOL);
        xrc.AddProperty("auth_needed", "auth_needed", XRC_TYPE_BOOL);
        xrc.AddProperty("markup", "markup", XRC_TYPE_BOOL);
        xrc.AddProperty("bitmap", "bitmap", XRC_TYPE_BITMAP);

        if (!obj->IsNull("disabled"))
            xrc.AddProperty("disabled", "disabled", XRC_TYPE_BITMAP);

        if (!obj->IsNull("pressed"))
            xrc.AddProperty("pressed", "pressed", XRC_TYPE_BITMAP);

        if (!obj->IsNull("focus"))
            xrc.AddProperty("focus", "focus", XRC_TYPE_BITMAP);

        if (!obj->IsNull("current"))
            xrc.AddProperty("current", "current", XRC_TYPE_BITMAP);

        if (!obj->IsNull("position"))
            xrc.AddProperty("position", "position", XRC_TYPE_TEXT);

        if (!obj->IsNull("margins"))
            xrc.AddProperty("margins", "margins", XRC_TYPE_SIZE);

        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxButton");
        filter.AddWindowProperties();
        filter.AddProperty("label", "label", XRC_TYPE_TEXT);
        filter.AddProperty("default", "default", XRC_TYPE_BOOL);
        filter.AddProperty("auth_needed", "auth_needed", XRC_TYPE_BOOL);
        filter.AddProperty("markup", "markup", XRC_TYPE_BOOL);
        filter.AddProperty("bitmap", "bitmap", XRC_TYPE_BITMAP);
        filter.AddProperty("disabled", "disabled", XRC_TYPE_BITMAP);
        filter.AddProperty("pressed", "pressed", XRC_TYPE_BITMAP);
        filter.AddProperty("focus", "focus", XRC_TYPE_BITMAP);
        filter.AddProperty("current", "current", XRC_TYPE_BITMAP);
        filter.AddProperty("position", "position", XRC_TYPE_TEXT);
        filter.AddProperty("margins", "margins", XRC_TYPE_SIZE);
        return filter.GetXfbObject();
    }
};

class BitmapButtonComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxBitmapButton* bmpButton = new wxBitmapButton(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsBitmap("bitmap"),
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        // To stay in sync what the generator templates do apply the markup label here as well
        if (obj->GetPropertyAsInteger("markup"))
            bmpButton->SetLabelMarkup(obj->GetPropertyAsString("label"));

        if (obj->GetPropertyAsInteger("default"))
            bmpButton->SetDefault();

        if (obj->GetPropertyAsInteger("auth_needed"))
            bmpButton->SetAuthNeeded();

        if (!obj->IsNull("disabled"))
            bmpButton->SetBitmapDisabled(obj->GetPropertyAsBitmap("disabled"));

        if (!obj->IsNull("pressed"))
            bmpButton->SetBitmapPressed(obj->GetPropertyAsBitmap("pressed"));

        if (!obj->IsNull("focus"))
            bmpButton->SetBitmapFocus(obj->GetPropertyAsBitmap("focus"));

        if (!obj->IsNull("current"))
            bmpButton->SetBitmapCurrent(obj->GetPropertyAsBitmap("current"));

        if (!obj->IsNull("position"))
            bmpButton->SetBitmapPosition(
                static_cast<wxDirection>(obj->GetPropertyAsInteger("position")));

        if (!obj->IsNull("margins"))
            bmpButton->SetBitmapMargins(obj->GetPropertyAsSize("margins"));

        return bmpButton;
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxBitmapButton",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("bitmap", "bitmap", XRC_TYPE_BITMAP);
        if (!obj->IsNull("disabled")) {
            xrc.AddProperty("disabled", "disabled", XRC_TYPE_BITMAP);
        }
        if (!obj->IsNull("pressed")) {
            xrc.AddProperty("pressed", "pressed", XRC_TYPE_BITMAP);
        }
        if (!obj->IsNull("focus")) {
            xrc.AddProperty("focus", "focus", XRC_TYPE_BITMAP);
        }
        if (!obj->IsNull("current")) {
            xrc.AddProperty("current", "current", XRC_TYPE_BITMAP);
        }
        if (!obj->IsNull("position")) {
            xrc.AddProperty("position", "position", XRC_TYPE_TEXT);
        }
        if (!obj->IsNull("margins")) {
            xrc.AddProperty("margins", "margins", XRC_TYPE_SIZE);
        }
        xrc.AddProperty("default", "default", XRC_TYPE_BOOL);
        xrc.AddProperty("auth_needed", "auth_needed", XRC_TYPE_BOOL);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxBitmapButton");
        filter.AddWindowProperties();
        filter.AddProperty("bitmap", "bitmap", XRC_TYPE_BITMAP);
        filter.AddProperty("disabled", "disabled", XRC_TYPE_BITMAP);
        filter.AddProperty("pressed", "pressed", XRC_TYPE_BITMAP);
        filter.AddProperty("focus", "focus", XRC_TYPE_BITMAP);
        filter.AddProperty("current", "current", XRC_TYPE_BITMAP);
        filter.AddProperty("position", "position", XRC_TYPE_TEXT);
        filter.AddProperty("margins", "margins", XRC_TYPE_SIZE);
        filter.AddProperty("default", "default", XRC_TYPE_BOOL);
        filter.AddProperty("auth_needed", "auth_needed", XRC_TYPE_BOOL);
        return filter.GetXfbObject();
    }
};

class TextCtrlComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxTextCtrl* textCtrl = new wxTextCtrl(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsString("value"),
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        if (!obj->IsNull("maxlength"))
            textCtrl->SetMaxLength(obj->GetPropertyAsInteger("maxlength"));

        textCtrl->PushEventHandler(new ComponentEvtHandler(textCtrl, GetManager()));
        return textCtrl;
    }

    void Cleanup(wxObject* obj) override
    {
        wxTextCtrl* textCtrl = wxDynamicCast(obj, wxTextCtrl);
        if (textCtrl)
            textCtrl->PopEventHandler(true);
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxTextCtrl",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("value", "value", XRC_TYPE_TEXT);
        if (!obj->IsNull("maxlength"))
            xrc.AddProperty("maxlength", "maxlength", XRC_TYPE_INTEGER);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxTextCtrl");
        filter.AddWindowProperties();
        filter.AddProperty("value", "value", XRC_TYPE_TEXT);
        filter.AddProperty("maxlength", "maxlength", XRC_TYPE_INTEGER);
        return filter.GetXfbObject();
    }
};
// TODO
void ComponentEvtHandler::OnText(wxCommandEvent&)
{
    wxTextCtrl* textCtrl = wxDynamicCast(m_window, wxTextCtrl);
    if (textCtrl) {
        m_manager->ModifyProperty(m_window, "value", textCtrl->GetValue());
        textCtrl->SetInsertionPointEnd();
        textCtrl->SetFocus();
        return;
    }

    wxComboBox* comboBox = wxDynamicCast(m_window, wxComboBox);
    if (comboBox) {
        m_manager->ModifyProperty(m_window, "value", comboBox->GetValue());
        comboBox->SetInsertionPointEnd();
        comboBox->SetFocus();
        return;
    }
}

class StaticTextComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxString label = obj->GetPropertyAsString("label");
        wxStaticText* staticText = new wxStaticText(
            (wxWindow*)parent, wxID_ANY, label,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        staticText->Wrap(obj->GetPropertyAsInteger("wrap"));

        if (obj->GetPropertyAsInteger("markup"))
            staticText->SetLabelMarkup(label);

        return staticText;
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        wxString name = obj->GetPropertyAsString("name");
        ObjectToXrcFilter xrc(obj, "wxStaticText", name);
        xrc.AddWindowProperties();
        xrc.AddProperty("label", "label", XRC_TYPE_TEXT);
        xrc.AddProperty("wrap", "wrap", XRC_TYPE_INTEGER);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxStaticText");
        filter.AddWindowProperties();
        filter.AddProperty("label", "label", XRC_TYPE_TEXT);
        filter.AddProperty("wrap", "wrap", XRC_TYPE_INTEGER);
        return filter.GetXfbObject();
    }
};

class ComboBoxComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxComboBox* comboBox = new wxComboBox(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsString("value"),
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"), 0, nullptr,
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        // choices
        wxArrayString choices = obj->GetPropertyAsArrayString("choices");
        for (size_t i = 0; i < choices.GetCount(); i++)
            comboBox->Append(choices[i]);

        int sel = obj->GetPropertyAsInteger("selection");
        if (sel > wxNOT_FOUND && sel < (int)choices.GetCount())
            comboBox->SetSelection(sel);

        comboBox->PushEventHandler(new ComponentEvtHandler(comboBox, GetManager()));
        return comboBox;
    }

    void Cleanup(wxObject* obj) override
    {
        wxComboBox* comboBox = wxDynamicCast(obj, wxComboBox);
        if (comboBox)
            comboBox->PopEventHandler(true);
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxComboBox",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("value", "value", XRC_TYPE_TEXT);
        xrc.AddProperty("choices", "content", XRC_TYPE_STRINGLIST);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxComboBox");
        filter.AddWindowProperties();
        filter.AddProperty("value", "value", XRC_TYPE_TEXT);
        filter.AddProperty("content", "choices", XRC_TYPE_STRINGLIST);
        return filter.GetXfbObject();
    }
};

class BitmapComboBoxComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxBitmapComboBox* bmpComboBox = new wxBitmapComboBox(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsString("value"),
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"), 0, nullptr,
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        // choices
        wxArrayString choices = obj->GetPropertyAsArrayString("choices");
        for (size_t i = 0; i < choices.GetCount(); i++) {
            wxImage img(choices[i].BeforeFirst(wxChar(58)));
            bmpComboBox->Append(choices[i].AfterFirst(wxChar(58)), wxBitmap(img));
        }
        int sel = obj->GetPropertyAsInteger("selection");
        if (sel > wxNOT_FOUND && sel < (int)choices.GetCount())
            bmpComboBox->SetSelection(sel);

        bmpComboBox->PushEventHandler(new ComponentEvtHandler(bmpComboBox, GetManager()));
        return bmpComboBox;
    }

    void Cleanup(wxObject* obj) override
    {
        wxBitmapComboBox* bmpComboBox = wxDynamicCast(obj, wxBitmapComboBox);
        if (bmpComboBox)
            bmpComboBox->PopEventHandler(true);
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxBitmapComboBox",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("value", "value", XRC_TYPE_TEXT);
        xrc.AddProperty("choices", "content", XRC_TYPE_STRINGLIST);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxBitmapComboBox");
        filter.AddWindowProperties();
        filter.AddProperty("value", "value", XRC_TYPE_TEXT);
        filter.AddProperty("content", "choices", XRC_TYPE_STRINGLIST);
        return filter.GetXfbObject();
    }
};

class CheckBoxComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxCheckBox* checkBox = new wxCheckBox(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsString("label"),
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("window_style")
                | obj->GetPropertyAsInteger("style"));

        checkBox->SetValue(obj->GetPropertyAsInteger("checked"));
        checkBox->PushEventHandler(new ComponentEvtHandler(checkBox, GetManager()));
        return checkBox;
    }

    void Cleanup(wxObject* obj) override
    {
        wxCheckBox* checkBox = wxDynamicCast(obj, wxCheckBox);
        if (checkBox)
            checkBox->PopEventHandler(true);
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxCheckBox",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("label", "label", XRC_TYPE_TEXT);
        xrc.AddProperty("checked", "checked", XRC_TYPE_BOOL);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxCheckBox");
        filter.AddWindowProperties();
        filter.AddProperty("label", "label", XRC_TYPE_TEXT);
        filter.AddProperty("checked", "checked", XRC_TYPE_BOOL);
        return filter.GetXfbObject();
    }
};

void ComponentEvtHandler::OnChecked(wxCommandEvent&)
{
    wxCheckBox* checkBox = wxDynamicCast(m_window, wxCheckBox);
    if (!checkBox)
        return;

    wxString cbValue;
    cbValue.Printf("%i", checkBox->GetValue());
    m_manager->ModifyProperty(m_window, "checked", cbValue);
    checkBox->SetFocus();
}

class StaticBitmapComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        return new wxStaticBitmap(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsBitmap("bitmap"),
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("window_style"));
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxStaticBitmap",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("bitmap", "bitmap", XRC_TYPE_BITMAP);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxStaticBitmap");
        filter.AddWindowProperties();
        filter.AddProperty("bitmap", "bitmap", XRC_TYPE_BITMAP);
        return filter.GetXfbObject();
    }
};

// TODO: Remove?
class XpmStaticBitmapComponent : public StaticBitmapComponent {
};

class StaticLineComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        return new wxStaticLine(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxStaticLine",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxStaticLine");
        filter.AddWindowProperties();
        return filter.GetXfbObject();
    }
};

class ListCtrlComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxListCtrl* listCtrl = new wxListCtrl(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            (obj->GetPropertyAsInteger("style")
             | obj->GetPropertyAsInteger("window_style"))
                & ~wxLC_VIRTUAL);

        // Refilling
        int i, j;
        wxString buf;
        if ((listCtrl->GetWindowStyle() & wxLC_REPORT)) {
            for (i = 0; i < 4; i++) {
                buf.Printf("Label %d", i);
                listCtrl->InsertColumn(i, buf, wxLIST_FORMAT_LEFT, 80);
            }
        }
        for (j = 0; j < 10; j++) {
            long temp;
            buf.Printf("Cell (0,%d)", j);
            temp = listCtrl->InsertItem(j, buf);
            if ((listCtrl->GetWindowStyle() & wxLC_REPORT)) {
                for (i = 1; i < 4; i++) {
                    buf.Printf("Cell (%d,%d)", i, j);
                    listCtrl->SetItem(temp, i, buf);
                }
            }
        }
        return listCtrl;
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxListCtrl",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxListCtrl");
        filter.AddWindowProperties();
        return filter.GetXfbObject();
    }
};

class ListBoxComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxListBox* listBox = new wxListBox(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"), 0, nullptr,
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        // choices
        wxArrayString choices = obj->GetPropertyAsArrayString("choices");
        for (size_t i = 0; i < choices.Count(); i++)
            listBox->Append(choices[i]);

        return listBox;
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxListBox",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("choices", "content", XRC_TYPE_STRINGLIST);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxListBox");
        filter.AddWindowProperties();
        filter.AddProperty("content", "choices", XRC_TYPE_STRINGLIST);
        return filter.GetXfbObject();
    }
};

class RadioBoxComponent : public ComponentBase, public wxEvtHandler {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxArrayString choices = obj->GetPropertyAsArrayString("choices");
        int count = choices.Count();
        if (!count) {
            choices.Add("wxRadioBox must have at least one choice");
            count = 1;
        }

        int majorDim = obj->GetPropertyAsInteger("majorDimension");
        if (majorDim < 1) {
            wxLogWarning("majorDimension must be greater than zero.");
            majorDim = 1;
        }

        wxRadioBox* radioBox = new wxRadioBox(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsString("label"),
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            choices, majorDim,
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        int selection = obj->GetPropertyAsInteger("selection");
        if (selection < count)
            radioBox->SetSelection(selection);

        radioBox->Bind(wxEVT_COMMAND_RADIOBOX_SELECTED,
                       &RadioBoxComponent::OnRadioBox, this);
        return radioBox;
    }

    void OnRadioBox(wxCommandEvent& event)
    {
        wxRadioBox* radioBox = dynamic_cast<wxRadioBox*>(event.GetEventObject());
        if (!radioBox)
            return;

        wxString value;
        value.Printf("%i", radioBox->GetSelection());
        GetManager()->ModifyProperty(radioBox, "selection", value);
        radioBox->SetFocus();
        GetManager()->SelectObject(radioBox);
    }

    void Cleanup(wxObject* obj) override
    {
        wxRadioBox* radioBox = dynamic_cast<wxRadioBox*>(obj);
        if (!radioBox)
            return;

        radioBox->Unbind(
            wxEVT_COMMAND_RADIOBOX_SELECTED, &RadioBoxComponent::OnRadioBox, this);

        ComponentBase::Cleanup(obj);
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxRadioBox",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("label", "label", XRC_TYPE_TEXT);
        xrc.AddProperty("selection", "selection", XRC_TYPE_INTEGER);
        xrc.AddProperty("choices", "content", XRC_TYPE_STRINGLIST);
        xrc.AddProperty("majorDimension", "dimension", XRC_TYPE_INTEGER);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxRadioBox");
        filter.AddWindowProperties();
        filter.AddProperty("label", "label", XRC_TYPE_TEXT);
        filter.AddProperty("selection", "selection", XRC_TYPE_INTEGER);
        filter.AddProperty("content", "choices", XRC_TYPE_STRINGLIST);
        filter.AddProperty("dimension", "majorDimension", XRC_TYPE_INTEGER);
        return filter.GetXfbObject();
    }
};

class RadioButtonComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxRadioButton* radioButton = new wxRadioButton(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsString("label"),
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        radioButton->SetValue((obj->GetPropertyAsInteger("value")));
        return radioButton;
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxRadioButton",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("label", "label", XRC_TYPE_TEXT);
        xrc.AddProperty("value", "value", XRC_TYPE_BOOL);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxRadioButton");
        filter.AddWindowProperties();
        filter.AddProperty("label", "label", XRC_TYPE_TEXT);
        filter.AddProperty("value", "value", XRC_TYPE_BOOL);
        return filter.GetXfbObject();
    }
};

class StatusBarComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxStatusBar* statusBar = new wxIndependentStatusBar(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        statusBar->SetFieldsCount(obj->GetPropertyAsInteger("fields"));
#ifndef __WXMSW__
        statusBar->PushEventHandler(new wxLeftDownRedirect(statusBar, GetManager()));
#endif
        return statusBar;
    }
#ifndef __WXMSW__
    void Cleanup(wxObject* obj) override
    {
        wxStatusBar* statusBar = wxDynamicCast(obj, wxStatusBar);
        if (statusBar)
            statusBar->PopEventHandler(true);
    }
#endif
    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxStatusBar", obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("fields", "fields", XRC_TYPE_INTEGER);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxStatusBar");
        filter.AddWindowProperties();
        filter.AddProperty("fields", "fields", XRC_TYPE_INTEGER);
        return filter.GetXfbObject();
    }
};

class MenuBarComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* /*parent*/) override
    {
        return new wxMenuBar(
            obj->GetPropertyAsInteger("style")
            | obj->GetPropertyAsInteger("window_style"));
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxMenuBar", obj->GetPropertyAsString("name"));
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxMenuBar");
        return filter.GetXfbObject();
    }
};

class MenuComponent : public ComponentBase {
public:
    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxMenu", obj->GetPropertyAsString("name"));
        xrc.AddProperty("label", "label", XRC_TYPE_TEXT);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxMenu");
        filter.AddProperty("label", "label", XRC_TYPE_TEXT);
        return filter.GetXfbObject();
    }
};

class SubMenuComponent : public ComponentBase {
public:
    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxMenu", obj->GetPropertyAsString("name"));
        xrc.AddProperty("label", "label", XRC_TYPE_TEXT);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "submenu");
        filter.AddProperty("label", "label", XRC_TYPE_TEXT);
        return filter.GetXfbObject();
    }
};

class MenuItemComponent : public ComponentBase {
public:
    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxMenuItem",
                              obj->GetPropertyAsString("name"));

        wxString shortcut = obj->GetPropertyAsString("shortcut");
        wxString label;

        if (shortcut.IsEmpty())
            label = obj->GetPropertyAsString("label");
        else
            label = obj->GetPropertyAsString("label") + "\t" + shortcut;

        xrc.AddPropertyValue("label", label, true);
        xrc.AddProperty("help", "help", XRC_TYPE_TEXT);

        if (!obj->IsNull("bitmap"))
            xrc.AddProperty("bitmap", "bitmap", XRC_TYPE_BITMAP);

        int kind = obj->GetPropertyAsInteger("kind");

        if (obj->GetPropertyAsInteger("checked") && (kind == wxITEM_RADIO || kind == wxITEM_CHECK)) {
            xrc.AddProperty("checked", "checked", XRC_TYPE_BOOL);
        }
        if (!obj->GetPropertyAsInteger("enabled"))
            xrc.AddProperty("enabled", "enabled", XRC_TYPE_BOOL);

        switch (kind) {
        case wxITEM_CHECK:
            xrc.AddPropertyValue("checkable", "1");
            break;
        case wxITEM_RADIO:
            xrc.AddPropertyValue("radio", "1");
            break;
        }
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxMenuItem");

        try {
            ticpp::Element* labelElement = xrcObj->FirstChildElement("label");
            wxString label(labelElement->GetText().c_str(), wxConvUTF8);

            wxString shortcut;
            int pos = label.Find("\\t");
            if (pos >= 0) {
                shortcut = label.Mid(pos + 2);
                label = label.Left(pos);
            }
            filter.AddPropertyValue("label", label, true);
            filter.AddPropertyValue("shortcut", shortcut);
        } catch (ticpp::Exception&) {
        }
        filter.AddProperty("help", "help", XRC_TYPE_TEXT);
        filter.AddProperty("bitmap", "bitmap", XRC_TYPE_BITMAP);
        return filter.GetXfbObject();
    }
};

class SeparatorComponent : public ComponentBase {
public:
    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "separator");
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "separator");
        return filter.GetXfbObject();
    }
};

class ToolBarComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxToolBar* toolBar = new wxToolBar(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style")
                | wxTB_NOALIGN | wxTB_NODIVIDER | wxNO_BORDER);

        if (!obj->IsNull("bitmapsize"))
            toolBar->SetToolBitmapSize(obj->GetPropertyAsSize("bitmapsize"));

        if (!obj->IsNull("margins")) {
            wxSize margins(obj->GetPropertyAsSize("margins"));
            toolBar->SetMargins(margins.GetWidth(), margins.GetHeight());
        }
        if (!obj->IsNull("packing"))
            toolBar->SetToolPacking(obj->GetPropertyAsInteger("packing"));

        if (!obj->IsNull("separation"))
            toolBar->SetToolSeparation(obj->GetPropertyAsInteger("separation"));

        toolBar->PushEventHandler(new ComponentEvtHandler(toolBar, GetManager()));
        return toolBar;
    }

    void Cleanup(wxObject* obj) override
    {
        wxToolBar* toolBar = wxDynamicCast(obj, wxToolBar);
        if (toolBar)
            toolBar->PopEventHandler(true);
    }

    void OnCreated(wxObject* wxobject, wxWindow* /*wxparent*/) override
    {
        wxToolBar* toolBar = wxDynamicCast(wxobject, wxToolBar);
        if (!toolBar)
            return;

        size_t count = GetManager()->GetChildCount(wxobject);
        for (size_t i = 0; i < count; ++i) {
            wxObject* child = GetManager()->GetChild(wxobject, i);
            IObject* childObj = GetManager()->GetIObject(child);

            if (childObj->GetClassName() == "tool") {
                toolBar->AddTool(
                    wxID_ANY,
                    childObj->GetPropertyAsString("label"),
                    childObj->GetPropertyAsBitmap("bitmap"),
                    wxNullBitmap,
                    (wxItemKind)childObj->GetPropertyAsInteger("kind"),
                    childObj->GetPropertyAsString("help"),
                    wxEmptyString, child);
            } else if (childObj->GetClassName() == "toolSeparator") {
                toolBar->AddSeparator();
            } else {
                wxControl* control = wxDynamicCast(child, wxControl);
                if (control)
                    toolBar->AddControl(control);
            }
        }
        toolBar->Realize();
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxToolBar", obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("bitmapsize", "bitmapsize", XRC_TYPE_SIZE);
        xrc.AddProperty("margins", "margins", XRC_TYPE_SIZE);
        xrc.AddProperty("packing", "packing", XRC_TYPE_INTEGER);
        xrc.AddProperty("separation", "separation", XRC_TYPE_INTEGER);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxToolBar");
        filter.AddWindowProperties();
        filter.AddProperty("bitmapsize", "bitmapsize", XRC_TYPE_SIZE);
        filter.AddProperty("margins", "margins", XRC_TYPE_SIZE);
        filter.AddProperty("packing", "packing", XRC_TYPE_INTEGER);
        filter.AddProperty("separation", "separation", XRC_TYPE_INTEGER);
        return filter.GetXfbObject();
    }
};

wxMenu* AuiToolBar::GetMenuFromObject(IObject* menuObj)
{
    int lastMenuId = wxID_HIGHEST + 1;
    wxMenu* menu = new wxMenu();
    for (size_t j = 0; j < menuObj->GetChildCount(); j++) {
        IObject* menuItem = menuObj->GetChildPtr(j);
        if (menuItem->GetTypeName() == "submenu") {
            menu->Append(
                lastMenuId++,
                menuItem->GetPropertyAsString("label"),
                GetMenuFromObject(menuItem));
        } else if (menuItem->GetClassName() == "separator") {
            menu->AppendSeparator();
        } else {
            wxString label = menuItem->GetPropertyAsString("label");
            wxString shortcut = menuItem->GetPropertyAsString("shortcut");
            if (!shortcut.IsEmpty()) {
                label = label + wxChar('\t') + shortcut;
            }
            wxMenuItem* item = new wxMenuItem(
                menu, lastMenuId++, label,
                menuItem->GetPropertyAsString("help"),
                (wxItemKind)menuItem->GetPropertyAsInteger("kind"));

            if (!menuItem->IsNull("bitmap")) {
                wxBitmap unchecked = wxNullBitmap;
                if (!menuItem->IsNull("unchecked_bitmap"))
                    unchecked = menuItem->GetPropertyAsBitmap("unchecked_bitmap");
#ifdef __WXMSW__
                item->SetBitmaps(menuItem->GetPropertyAsBitmap("bitmap"), unchecked);
#elif defined(__WXGTK__)
                item->SetBitmap(menuItem->GetPropertyAsBitmap("bitmap"));
#endif
            } else {
                if (!menuItem->IsNull("unchecked_bitmap")) {
#ifdef __WXMSW__
                    item->SetBitmaps(wxNullBitmap, menuItem->GetPropertyAsBitmap("unchecked_bitmap"));
#endif
                }
            }
            menu->Append(item);

            if (item->GetKind() == wxITEM_CHECK
                && menuItem->GetPropertyAsInteger("checked")) {
                item->Check(true);
            }
            item->Enable((menuItem->GetPropertyAsInteger("enabled")));
        }
    }
    return menu;
}

void AuiToolBar::OnDropDownMenu(wxAuiToolBarEvent& event)
{
    wxAuiToolBar* auiToolBar = wxDynamicCast(event.GetEventObject(), wxAuiToolBar);
    if (!auiToolBar)
        return;

    wxAuiToolBarItem* item = auiToolBar->FindTool(event.GetId());
    if (!item)
        return;

    if (item->HasDropDown()) {
        wxObject* wxobject = GetObject(item->GetUserData());

        if (wxobject)
            m_manager->SelectObject(wxobject);

        auiToolBar->SetToolSticky(item->GetId(), true);
        wxRect rect = auiToolBar->GetToolRect(item->GetId());
        wxPoint pt = auiToolBar->ClientToScreen(rect.GetBottomLeft());
        pt = auiToolBar->ScreenToClient(pt);

        wxObject* child = m_manager->GetChild(wxobject, 0);
        if (!child)
            return;

        auiToolBar->PopupMenu(GetMenuFromObject(m_manager->GetIObject(child)), pt);
        auiToolBar->SetToolSticky(item->GetId(), false);
        /*
        TODO: For some unknown reason, this event is occasionally
        propagated upwards even though it's been handled here and there's
        a clash of IDs between that given a tool by wxAui and the IDs in mainframe.cpp
        which sometimes results in a wxWeaver dialog being fired.
        So StopPropagation() now, but those IDs need changing to avoid clashes.
        event.StopPropagation();
        */
    }
}

void AuiToolBar::OnTool(wxCommandEvent& event)
{
    AuiToolBar* auiToolBar = wxDynamicCast(event.GetEventObject(), AuiToolBar);
    if (!auiToolBar)
        return;

    wxAuiToolBarItem* item = auiToolBar->FindTool(event.GetId());
    if (item) {
        wxObject* wxobject = GetObject(item->GetUserData());
        if (wxobject)
            m_manager->SelectObject(wxobject);
    }
}

class AuiToolBarComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        AuiToolBar* auiToolBar = new AuiToolBar(
            (wxWindow*)parent, GetManager(), wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style"));
#if 0
                | obj->GetPropertyAsInteger("window_style"
                | wxTB_NOALIGN | wxTB_NODIVIDER | wxNO_BORDER);
#endif
        if (!obj->IsNull("bitmapsize"))
            auiToolBar->SetToolBitmapSize(obj->GetPropertyAsSize("bitmapsize"));

        if (!obj->IsNull("margins")) {
            wxSize margins(obj->GetPropertyAsSize("margins"));
            auiToolBar->SetMargins(margins.GetWidth(), margins.GetHeight());
        }
        if (!obj->IsNull("packing"))
            auiToolBar->SetToolPacking(obj->GetPropertyAsInteger("packing"));

        if (!obj->IsNull("separation"))
            auiToolBar->SetToolSeparation(obj->GetPropertyAsInteger("separation"));

        return auiToolBar;
    }

    void OnCreated(wxObject* wxobject, wxWindow* /*wxparent*/) override
    {
        AuiToolBar* auiToolBar = wxDynamicCast(wxobject, AuiToolBar);
        if (!auiToolBar)
            return;

        size_t count = GetManager()->GetChildCount(wxobject);
        for (size_t i = 0; i < count; ++i) {
            wxObject* child = GetManager()->GetChild(wxobject, i);
            IObject* childObj = GetManager()->GetIObject(child);
            if ("tool" == childObj->GetClassName()) {
                auiToolBar->AddTool(
                    wxID_ANY,
                    childObj->GetPropertyAsString("label"),
                    childObj->GetPropertyAsBitmap("bitmap"),
                    wxNullBitmap,
                    (wxItemKind)childObj->GetPropertyAsInteger("kind"),
                    childObj->GetPropertyAsString("help"),
                    wxEmptyString, child);

                wxAuiToolBarItem* itm = auiToolBar->FindToolByIndex(i);
                wxASSERT(itm);
                itm->SetUserData(i);
                auiToolBar->SetObject(i, child);
                if (childObj->GetPropertyAsInteger("context_menu") == 1
                    && !itm->HasDropDown())
                    auiToolBar->SetToolDropDown(itm->GetId(), true);
                else if (!childObj->GetPropertyAsInteger("context_menu")
                         && itm->HasDropDown())
                    auiToolBar->SetToolDropDown(itm->GetId(), false);
            } else if ("toolSeparator" == childObj->GetClassName()) {
                auiToolBar->AddSeparator();
            } else {
                wxControl* control = wxDynamicCast(child, wxControl);
                if (control)
                    auiToolBar->AddControl(control);
            }
        }
        auiToolBar->Realize();
    }
#if 0
    ticpp::Element* ExportToXrc(IObject *obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxAuiToolBar", obj->GetPropertyAsString("name");
        xrc.AddWindowProperties();
        xrc.AddProperty("bitmapsize", "bitmapsize", XRC_TYPE_SIZE);
        xrc.AddProperty("margins", "margins", XRC_TYPE_SIZE);
        xrc.AddProperty("packing", "packing", XRC_TYPE_INTEGER);
        xrc.AddProperty("separation", "separation", XRC_TYPE_INTEGER);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxAuiToolBar";
        filter.AddWindowProperties();
        filter.AddProperty("bitmapsize", "bitmapsize", XRC_TYPE_SIZE);
        filter.AddProperty("margins", "margins", XRC_TYPE_SIZE);
        filter.AddProperty("packing", "packing", XRC_TYPE_INTEGER);
        filter.AddProperty("separation", "separation", XRC_TYPE_INTEGER);
        return filter.GetXfbObject();
    }
#endif
};

void ComponentEvtHandler::OnTool(wxCommandEvent& event)
{
    //FIXME: Same as above
    wxToolBar* toolBar = wxDynamicCast(event.GetEventObject(), wxToolBar);
    if (!toolBar)
        return;

    wxObject* wxobject = toolBar->GetToolClientData(event.GetId());
    if (wxobject)
        m_manager->SelectObject(wxobject);
}

class ToolComponent : public ComponentBase {
public:
    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "tool", obj->GetPropertyAsString("name"));
        xrc.AddProperty("label", "label", XRC_TYPE_TEXT);
        xrc.AddProperty("tooltip", "tooltip", XRC_TYPE_TEXT);
        xrc.AddProperty("statusbar", "longhelp", XRC_TYPE_TEXT);
        xrc.AddProperty("bitmap", "bitmap", XRC_TYPE_BITMAP);

        wxItemKind kind = (wxItemKind)obj->GetPropertyAsInteger("kind");
        if (wxITEM_CHECK == kind) {
            xrc.AddPropertyValue("toggle", "1");
        } else if (wxITEM_RADIO == kind) {
            xrc.AddPropertyValue("radio", "1");
        }
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "tool");
        filter.AddProperty("longhelp", "statusbar", XRC_TYPE_TEXT);
        filter.AddProperty("tooltip", "tooltip", XRC_TYPE_TEXT);
        filter.AddProperty("label", "label", XRC_TYPE_TEXT);
        filter.AddProperty("bitmap", "bitmap", XRC_TYPE_BITMAP);

        bool gotToggle = false;
        bool gotRadio = false;
        ticpp::Element* toggle = xrcObj->FirstChildElement("toggle", false);
        if (toggle) {
            toggle->GetTextOrDefault(&gotToggle, false);
            if (gotToggle)
                filter.AddPropertyValue("kind", "wxITEM_CHECK");
        }
        if (!gotToggle) {
            ticpp::Element* radio = xrcObj->FirstChildElement("radio", false);
            if (radio) {
                radio->GetTextOrDefault(&gotRadio, false);
                if (gotRadio)
                    filter.AddPropertyValue("kind", "wxITEM_RADIO");
            }
        }
        if (!(gotToggle || gotRadio))
            filter.AddPropertyValue("kind", "wxITEM_NORMAL");

        return filter.GetXfbObject();
    }
};

class ToolSeparatorComponent : public ComponentBase {
public:
    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "separator");
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "toolSeparator");
        return filter.GetXfbObject();
    }
};

class ChoiceComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxArrayString choices = obj->GetPropertyAsArrayString("choices");

        // TODO: is `new` necessary?
        wxString* strings = new wxString[choices.GetCount()];
        for (size_t i = 0; i < choices.GetCount(); i++)
            strings[i] = choices[i];

        wxChoice* choice = new wxChoice(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            (int)choices.Count(), strings,
            obj->GetPropertyAsInteger("window_style"));

        int sel = obj->GetPropertyAsInteger("selection");
        if (sel < (int)choices.GetCount())
            choice->SetSelection(sel);

        delete[] strings;

        choice->PushEventHandler(new ComponentEvtHandler(choice, GetManager()));
        return choice;
    }

    void Cleanup(wxObject* obj) override
    {
        wxChoice* choice = wxDynamicCast(obj, wxChoice);
        if (choice)
            choice->PopEventHandler(true);
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxChoice",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("selection", "selection", XRC_TYPE_INTEGER);
        xrc.AddProperty("choices", "content", XRC_TYPE_STRINGLIST);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxChoice");
        filter.AddWindowProperties();
        filter.AddProperty("selection", "selection", XRC_TYPE_INTEGER);
        filter.AddProperty("content", "choices", XRC_TYPE_STRINGLIST);
        return filter.GetXfbObject();
    }
};

void ComponentEvtHandler::OnChoice(wxCommandEvent&)
{
    wxChoice* choice = wxDynamicCast(m_window, wxChoice);
    if (!choice)
        return;

    wxString value;
    value.Printf("%i", choice->GetSelection());
    m_manager->ModifyProperty(m_window, "selection", value);
    choice->SetFocus();
}

void ComponentEvtHandler::OnComboBox(wxCommandEvent&)
{
    wxComboBox* comboBox = wxDynamicCast(m_window, wxComboBox);
    if (!comboBox)
        return;

    wxString value;
    value.Printf("%i", comboBox->GetSelection());
    m_manager->ModifyProperty(m_window, "selection", value);
    comboBox->SetFocus();
}

class SliderComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        return new wxSlider(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsInteger("value"),
            obj->GetPropertyAsInteger("minValue"),
            obj->GetPropertyAsInteger("maxValue"),
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style")
                | obj->GetPropertyAsInteger("window_style"));
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxSlider", obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("value", "value", XRC_TYPE_INTEGER);
        xrc.AddProperty("minValue", "min", XRC_TYPE_INTEGER);
        xrc.AddProperty("maxValue", "max", XRC_TYPE_INTEGER);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxSlider");
        filter.AddWindowProperties();
        filter.AddProperty("value", "value", XRC_TYPE_INTEGER);
        filter.AddProperty("min", "minValue", XRC_TYPE_INTEGER);
        filter.AddProperty("max", "maxValue", XRC_TYPE_INTEGER);
        return filter.GetXfbObject();
    }
};

class GaugeComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxGauge* gauge = new wxGauge(
            (wxWindow*)parent, wxID_ANY,
            obj->GetPropertyAsInteger("range"),
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        gauge->SetValue(obj->GetPropertyAsInteger("value"));
        return gauge;
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxGauge", obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("range", "range", XRC_TYPE_INTEGER);
        xrc.AddProperty("value", "value", XRC_TYPE_INTEGER);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxGauge");
        filter.AddWindowProperties();
        filter.AddProperty("range", "range", XRC_TYPE_INTEGER);
        filter.AddProperty("value", "value", XRC_TYPE_INTEGER);
        return filter.GetXfbObject();
    }
};

class AnimCtrlComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxAnimationCtrl* animationCtrl = new wxAnimationCtrl(
            (wxWindow*)parent, wxID_ANY,
            wxNullAnimation,
            obj->GetPropertyAsPoint("pos"),
            obj->GetPropertyAsSize("size"),
            obj->GetPropertyAsInteger("style")
                | obj->GetPropertyAsInteger("window_style"));

        if (!obj->IsNull("animation")) {
            if (animationCtrl->LoadFile(obj->GetPropertyAsString("animation"))) {
                if (!obj->IsNull("play")
                    && (obj->GetPropertyAsInteger("play") == 1))
                    animationCtrl->Play();
                else
                    animationCtrl->Stop();
            }
        }
        if (!obj->IsNull("inactive_bitmap")) {
            wxBitmap bmp = obj->GetPropertyAsBitmap("inactive_bitmap");
            if (bmp.IsOk())
                animationCtrl->SetInactiveBitmap(bmp);
            else
                animationCtrl->SetInactiveBitmap(wxNullBitmap);
        }
        animationCtrl->PushEventHandler(new ComponentEvtHandler(animationCtrl, GetManager()));
        return animationCtrl;
    }

    void Cleanup(wxObject* obj) override
    {
        wxAnimationCtrl* animationCtrl = wxDynamicCast(obj, wxAnimationCtrl);
        if (animationCtrl)
            animationCtrl->PopEventHandler(true);
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
        ObjectToXrcFilter xrc(obj, "wxAnimationCtrl",
                              obj->GetPropertyAsString("name"));
        xrc.AddWindowProperties();
        xrc.AddProperty("animation", "animation", XRC_TYPE_TEXT);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxAnimationCtrl");
        filter.AddWindowProperties();
        filter.AddProperty("animation", "animation", XRC_TYPE_TEXT);
        return filter.GetXfbObject();
    }
};

class InfoBarComponent : public ComponentBase {
public:
    wxObject* Create(IObject* obj, wxObject* parent) override
    {
        wxInfoBar* infoBar = new wxInfoBar((wxWindow*)parent);

        infoBar->SetShowHideEffects(
            (wxShowEffect)obj->GetPropertyAsInteger("show_effect"),
            (wxShowEffect)obj->GetPropertyAsInteger("hide_effect"));

        infoBar->SetEffectDuration(obj->GetPropertyAsInteger("duration"));
        infoBar->ShowMessage("Message ...", wxICON_INFORMATION);
        infoBar->PushEventHandler(new ComponentEvtHandler(infoBar, GetManager()));
        return infoBar;
    }

    void Cleanup(wxObject* obj) override
    {
        wxInfoBar* infoBar = wxDynamicCast(obj, wxInfoBar);
        if (infoBar)
            infoBar->PopEventHandler(true);
    }

    ticpp::Element* ExportToXrc(IObject* obj) override
    {
#if wxVERSION_NUMBER >= 3130
        ObjectToXrcFilter xrc(obj, "wxInfoBar", obj->GetPropertyAsString("name");
        xrc.AddWindowProperties();
#else
        ObjectToXrcFilter xrc(obj, "unknown", obj->GetPropertyAsString("name"));
#endif
        return xrc.GetXrcObject();
    }
#if wxVERSION_NUMBER >= 3130
    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj) override
    {
        XrcToXfbFilter filter(xrcObj, "wxInfoBar";
        filter.AddWindowProperties();
        return filter.GetXfbObject();
    }
#endif
};

void ComponentEvtHandler::OnButton(wxCommandEvent& event)
{
    wxInfoBar* infoBar = wxDynamicCast(m_window, wxInfoBar);
    if (infoBar) {
        m_timer.SetOwner(this);
        m_timer.Start(infoBar->GetEffectDuration() + 1000, true);
    }
    event.Skip();
}

void ComponentEvtHandler::OnTimer(wxTimerEvent&)
{
    wxInfoBar* infoBar = wxDynamicCast(m_window, wxInfoBar);
    if (infoBar)
        infoBar->ShowMessage(_("Message ..."));
}

class ImageListComponent : public ComponentBase {
    wxObject* Create(IObject* obj, wxObject* parent)
    {
        wxSize size = obj->GetPropertyAsSize("size");
        int imageListWidth = size.GetWidth();
        int imageListHeight = size.GetHeight();
#if 0
        if (imageListWidth < 1 || imageListHeight < 1)
            return nullptr;
#endif
        bool mask = obj->GetPropertyAsInteger("mask");
        IObject* parentObject = GetManager()->GetIObject(parent);
        wxString parentTypeName = parentObject->GetTypeName();
        wxImageList* imageList = new wxImageList(imageListWidth, imageListHeight, mask);

        if (parentTypeName == "notebook"
            || parentTypeName == "listbook"
            || parentTypeName == "toolbook"
            || parentTypeName == "treebook") {
            wxBookCtrlBase* bookCtrl = wxDynamicCast(parent, wxBookCtrlBase);
            if (bookCtrl)
                bookCtrl->AssignImageList(imageList);
        } else if (parentTypeName == "auinotebook") {
            // TODO: Better workaround for v3.0.x
            wxAuiNotebook* bookCtrl = wxDynamicCast(parent, wxAuiNotebook);
            if (bookCtrl)
                bookCtrl->AssignImageList(imageList);
        }
        return imageList;
    }

    void OnCreated(wxObject* wxobject, wxWindow* /*wxparent*/)
    {
        ImageList::RestoreSize(wxobject, GetManager());
    }

    ticpp::Element* ExportToXrc(IObject* obj)
    {
        wxString xrcPropName = "imagelist";
        if (obj->GetPropertyAsString("type") == "wxIMAGE_LIST_SMALL")
            xrcPropName = "imagelist-small";

        ObjectToXrcFilter xrc(obj, xrcPropName,
                              obj->GetPropertyAsString("name"), wxEmptyString, false);
        xrc.AddProperty("size", "size", XRC_TYPE_SIZE);
        xrc.AddProperty("mask", "mask", XRC_TYPE_BOOL);
        return xrc.GetXrcObject();
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj)
    {
        XrcToXfbFilter filter(xrcObj, "wxImageList", false);
        filter.AddProperty("size", "size", XRC_TYPE_SIZE);
        filter.AddProperty("mask", "mask", XRC_TYPE_BOOL);
        return filter.GetXfbObject();
    }
};

class BitmapItemComponent : public ComponentBase {
    ticpp::Element* ExportToXrc(IObject* object)
    {
        ObjectToXrcFilter xrc(object, "bitmap",
                              object->GetPropertyAsString("name"),
                              wxEmptyString, false);
        ticpp::Element* xrcObject = xrc.GetXrcObject();

        return BitmapItem::ToXrc(object, xrcObject);
    }

    ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj)
    {
        XrcToXfbFilter filter(xrcObj, "bitmapitem", false);
        filter.AddProperty("bitmap", "bitmap", XRC_TYPE_BITMAP);
        return filter.GetXfbObject();
    }
};

BEGIN_LIBRARY()

WINDOW_COMPONENT("wxMenuBar", MenuBarComponent)
ABSTRACT_COMPONENT("wxMenu", MenuComponent)
ABSTRACT_COMPONENT("wxMenuItem", MenuItemComponent)
ABSTRACT_COMPONENT("submenu", SubMenuComponent)
ABSTRACT_COMPONENT("separator", SeparatorComponent)

WINDOW_COMPONENT("wxAuiToolBar", AuiToolBarComponent)
WINDOW_COMPONENT("wxToolBar", ToolBarComponent)
ABSTRACT_COMPONENT("tool", ToolComponent)
ABSTRACT_COMPONENT("toolSeparator", ToolSeparatorComponent)

ABSTRACT_COMPONENT("wxImageList", ImageListComponent)
ABSTRACT_COMPONENT("bitmapitem", BitmapItemComponent)

WINDOW_COMPONENT("wxAnimationCtrl", AnimCtrlComponent)
WINDOW_COMPONENT("wxBitmapButton", BitmapButtonComponent)
WINDOW_COMPONENT("wxBitmapComboBox", BitmapComboBoxComponent)
WINDOW_COMPONENT("wxButton", ButtonComponent)
WINDOW_COMPONENT("wxCheckBox", CheckBoxComponent)
WINDOW_COMPONENT("wxChoice", ChoiceComponent)
WINDOW_COMPONENT("wxComboBox", ComboBoxComponent)
WINDOW_COMPONENT("wxGauge", GaugeComponent)
WINDOW_COMPONENT("wxInfoBar", InfoBarComponent)
WINDOW_COMPONENT("wxListBox", ListBoxComponent)
WINDOW_COMPONENT("wxListCtrl", ListCtrlComponent)
WINDOW_COMPONENT("wxRadioBox", RadioBoxComponent)
WINDOW_COMPONENT("wxRadioButton", RadioButtonComponent)
WINDOW_COMPONENT("wxSlider", SliderComponent)
WINDOW_COMPONENT("wxStaticBitmap", StaticBitmapComponent)
WINDOW_COMPONENT("wxStaticLine", StaticLineComponent)
WINDOW_COMPONENT("wxStaticText", StaticTextComponent)
WINDOW_COMPONENT("wxStatusBar", StatusBarComponent)
WINDOW_COMPONENT("wxTextCtrl", TextCtrlComponent)

// wxMenuItem & wxTool
MACRO(wxITEM_NORMAL)
MACRO(wxITEM_CHECK)
MACRO(wxITEM_RADIO)

// wxAuiToolBar
MACRO(wxAUI_TB_TEXT)
MACRO(wxAUI_TB_NO_TOOLTIPS)
MACRO(wxAUI_TB_NO_AUTORESIZE)
MACRO(wxAUI_TB_GRIPPER)
MACRO(wxAUI_TB_OVERFLOW)
MACRO(wxAUI_TB_VERTICAL)
MACRO(wxAUI_TB_HORZ_LAYOUT)
MACRO(wxAUI_TB_HORIZONTAL)
MACRO(wxAUI_TB_PLAIN_BACKGROUND)
MACRO(wxAUI_TB_HORZ_TEXT)
MACRO(wxAUI_TB_DEFAULT_STYLE)

// wxToolBar
MACRO(wxTB_FLAT)
MACRO(wxTB_DOCKABLE)
MACRO(wxTB_HORIZONTAL)
MACRO(wxTB_VERTICAL)
MACRO(wxTB_TEXT)
MACRO(wxTB_NOICONS)
MACRO(wxTB_NODIVIDER)
MACRO(wxTB_NOALIGN)
MACRO(wxTB_HORZ_LAYOUT)
MACRO(wxTB_HORZ_TEXT)
MACRO(wxTB_NO_TOOLTIPS)
MACRO(wxTB_BOTTOM)
MACRO(wxTB_RIGHT)
MACRO(wxTB_DEFAULT_STYLE)

// wxAnimationCtrl
MACRO(wxAC_DEFAULT_STYLE)
MACRO(wxAC_NO_AUTORESIZE)

// wxButton
MACRO(wxBU_LEFT)
MACRO(wxBU_TOP)
MACRO(wxBU_RIGHT)
MACRO(wxBU_BOTTOM)
MACRO(wxBU_EXACTFIT)
MACRO(wxBU_NOTEXT)
MACRO(wxLEFT)
MACRO(wxRIGHT)
MACRO(wxTOP)
MACRO(wxBOTTOM)

// wxCheckBox
MACRO(wxCHK_2STATE)
MACRO(wxCHK_3STATE)
MACRO(wxCHK_ALLOW_3RD_STATE_FOR_USER)

// wxComboBox
MACRO(wxCB_DROPDOWN)
MACRO(wxCB_READONLY)
MACRO(wxCB_SIMPLE)
MACRO(wxCB_SORT)

// wxGauge
MACRO(wxGA_HORIZONTAL)
MACRO(wxGA_SMOOTH)
MACRO(wxGA_VERTICAL)

// wxImageList
MACRO(wxIMAGE_LIST_NORMAL)
MACRO(wxIMAGE_LIST_SMALL)
#if 0 // not implemented
MACRO(wxIMAGE_LIST_STATE)
#endif

// wxInfoBar
MACRO(wxSHOW_EFFECT_NONE)
MACRO(wxSHOW_EFFECT_ROLL_TO_LEFT)
MACRO(wxSHOW_EFFECT_ROLL_TO_RIGHT)
MACRO(wxSHOW_EFFECT_ROLL_TO_TOP)
MACRO(wxSHOW_EFFECT_ROLL_TO_BOTTOM)
MACRO(wxSHOW_EFFECT_SLIDE_TO_LEFT)
MACRO(wxSHOW_EFFECT_SLIDE_TO_RIGHT)
MACRO(wxSHOW_EFFECT_SLIDE_TO_TOP)
MACRO(wxSHOW_EFFECT_SLIDE_TO_BOTTOM)
MACRO(wxSHOW_EFFECT_BLEND)
MACRO(wxSHOW_EFFECT_EXPAND)

// wxListBox
MACRO(wxLB_SINGLE)
MACRO(wxLB_MULTIPLE)
MACRO(wxLB_EXTENDED)
MACRO(wxLB_HSCROLL)
MACRO(wxLB_ALWAYS_SB)
MACRO(wxLB_NEEDED_SB)
MACRO(wxLB_NO_SB)
MACRO(wxLB_SORT)

// wxListCtrl
MACRO(wxLC_LIST)
MACRO(wxLC_REPORT)
MACRO(wxLC_VIRTUAL)
MACRO(wxLC_ICON)
MACRO(wxLC_SMALL_ICON)
MACRO(wxLC_ALIGN_TOP)
MACRO(wxLC_ALIGN_LEFT)
MACRO(wxLC_AUTOARRANGE)
MACRO(wxLC_EDIT_LABELS)
MACRO(wxLC_NO_SORT_HEADER)
MACRO(wxLC_NO_HEADER)
MACRO(wxLC_SINGLE_SEL)
MACRO(wxLC_SORT_ASCENDING)
MACRO(wxLC_SORT_DESCENDING)
MACRO(wxLC_HRULES)
MACRO(wxLC_VRULES)

// wxRadioBox
MACRO(wxRA_SPECIFY_ROWS)
MACRO(wxRA_SPECIFY_COLS)

// wxRadioButton
MACRO(wxRB_GROUP)
MACRO(wxRB_SINGLE)

// wxSlider
MACRO(wxSL_AUTOTICKS)
MACRO(wxSL_BOTTOM)
MACRO(wxSL_HORIZONTAL)
MACRO(wxSL_INVERSE)
MACRO(wxSL_MIN_MAX_LABELS)
MACRO(wxSL_VALUE_LABEL)
MACRO(wxSL_LABELS)
MACRO(wxSL_LEFT)
MACRO(wxSL_RIGHT)
MACRO(wxSL_SELRANGE)
MACRO(wxSL_TOP)
MACRO(wxSL_VERTICAL)
MACRO(wxSL_BOTH)

// wxStaticLine
MACRO(wxLI_HORIZONTAL)
MACRO(wxLI_VERTICAL)

// wxStaticText
MACRO(wxALIGN_LEFT)
MACRO(wxALIGN_CENTER_HORIZONTAL)
MACRO(wxALIGN_RIGHT)
MACRO(wxST_NO_AUTORESIZE)
MACRO(wxST_ELLIPSIZE_START)
MACRO(wxST_ELLIPSIZE_MIDDLE)
MACRO(wxST_ELLIPSIZE_END)

// wxStatusBar
MACRO(wxSTB_SIZEGRIP)
MACRO(wxSTB_SHOW_TIPS)
MACRO(wxSTB_ELLIPSIZE_START)
MACRO(wxSTB_ELLIPSIZE_MIDDLE)
MACRO(wxSTB_ELLIPSIZE_END)
MACRO(wxSTB_DEFAULT_STYLE)

// wxTextCtrl
MACRO(wxTE_MULTILINE)
MACRO(wxTE_READONLY)
MACRO(wxTE_RICH)
MACRO(wxTE_AUTO_URL)
MACRO(wxTE_CAPITALIZE)
MACRO(wxTE_CENTER)
MACRO(wxTE_CHARWRAP)
MACRO(wxTE_DONTWRAP)
MACRO(wxTE_LEFT)
MACRO(wxTE_NOHIDESEL)
MACRO(wxTE_PASSWORD)
MACRO(wxTE_PROCESS_ENTER)
MACRO(wxTE_PROCESS_TAB)
MACRO(wxTE_RICH2)
MACRO(wxTE_RIGHT)
MACRO(wxTE_WORDWRAP)
MACRO(wxTE_BESTWRAP)
MACRO(wxTE_NO_VSCROLL)

END_LIBRARY()
